{
  "swagger": "2.0",
  "info": {
    "description": "API for the GOX eCommerce platform. Allows placing and tracking of orders for cars. See the [published documentation](https://cds.pages.gitlab.cdls.infrastructure.volvo.care/ce/ecom-docs/HOMEPAGE) for guides and examples on how to use the eCommerce APIs.\n\n This API bundle is accessing the **euwest1** deployment in the **staging** Bakery environment.",
    "version": "1.0.0",
    "title": "GOX eCommerce Platform APIs for staging, euwest1"
  },
  "host": "apigw-ext-qa.euwest1.staging.volvo.care",
  "basePath": "/gox/ecom/ecom-api/",
  "tags": [
    {
      "name": "Cart Operations",
      "description": "Create carts, as well as modify information that affects the entire cart, such as adding customer data, delivery information, etc."
    },
    {
      "name": "Cart Checkout",
      "description": "Methods that perform checkout on the Cart to turn it into an Order. The general order is lock -> finish"
    },
    {
      "name": "Cart Contents",
      "description": "Manipulate the contents of the cart; add/remove items or modify quantity or other aspect of the cart."
    },
    {
      "name": "Order Facade",
      "description": "Access methods to view an order using the decorations of a Cart."
    },
    {
      "name": "OpenAPIApi",
      "description": "Generate OpenAPI based on env and region"
    },
    {
      "name": "OrderManagerIntegrationApiV3",
      "description": "API used by most external systems (ie. SalesForce) "
    },
    {
      "name": "ProductManagerApiV2",
      "description": "An example of getting started with the REST API"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/internal/ecomapi/v1/api/orders/{orderId}": {
      "get": {
        "tags": [
          "OrderManagerIntegrationApiV3"
        ],
        "summary": "Gets the extended order with customer and product details",
        "description": "Gets the extended order with customer and product details",
        "operationId": "getOrder",
        "produces": [
          "application/vnd.volvocars.api.ordermanagerclient.order.v3+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order ID or Display Order ID",
            "required": true,
            "type": "string",
            "x-example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderEntry",
              "originalRef": "#/definitions/OrderEntry"
            }
          },
          "404": {
            "description": "Order Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/api/orders/{orderId}/cancel": {
      "put": {
        "tags": [
          "OrderManagerIntegrationApiV3"
        ],
        "description": "Cancel the specified order",
        "operationId": "cancelOrder",
        "consumes": [
          "application/vnd.volvocars.api.ordermanager.ordercancellation.v1+json"
        ],
        "produces": [
          "application/vnd.volvocars.api.response.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order ID",
            "required": true,
            "type": "string",
            "x-example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderCancellation",
              "originalRef": "#/definitions/OrderCancellation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully canceled the order",
            "schema": {
              "$ref": "#/definitions/BaseResponse",
              "originalRef": "#/definitions/BaseResponse"
            }
          },
          "404": {
            "description": "Order not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/api/products/{product_id}": {
      "get": {
        "tags": [
          "ProductManagerApiV2"
        ],
        "description": "Retrieve Product from catalog",
        "operationId": "getProduct",
        "produces": [
          "application/vnd.volvocars.api.x.product.v2+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "type": "string",
            "x-example": "PCAT-jiaLUIfNGxqeVdkgkRnsCuzzCN"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the Product corresponding to the product Id",
            "schema": {
              "$ref": "#/definitions/RespObjectResponseProductV2",
              "originalRef": "#/definitions/RespObjectResponseProductV2"
            }
          },
          "404": {
            "description": "Cannot retrieve Product",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "userKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProductManagerApiV2"
        ],
        "description": "Purge cached product ID",
        "operationId": "deleteProduct",
        "produces": [
          "application/vnd.volvocars.api.x.product.v2+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "type": "string",
            "x-example": "PCAT-jiaLUIfNGxqeVdkgkRnsCuzzCN"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/BaseResponse",
              "originalRef": "#/definitions/BaseResponse"
            }
          }
        },
        "security": [
          {
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/api/{orderId}/external/{name}": {
      "get": {
        "tags": [
          "OrderManagerIntegrationApiV3"
        ],
        "description": "Retrieve external data",
        "operationId": "getExternalData",
        "produces": [
          "application/vnd.volvocars.api.ordermanager.externaldata.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order id",
            "required": true,
            "type": "string",
            "x-example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of external data",
            "required": true,
            "type": "string",
            "x-example": "BankInfoExternalData"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the external data corresponding to the order id and name",
            "schema": {
              "$ref": "#/definitions/ObjectResponseModelObject",
              "originalRef": "#/definitions/ObjectResponseModelObject"
            }
          },
          "404": {
            "description": "External data by that name not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/api/{orderId}/orderlines/{orderLineNumber}/step/{step}": {
      "get": {
        "tags": [
          "OrderManagerIntegrationApiV3"
        ],
        "summary": "Gets the step detail",
        "description": "Gets the step detail",
        "operationId": "getOrderStep",
        "produces": [
          "application/vnd.volvocars.api.ordermanagerclient.orderstep.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order ID",
            "required": true,
            "type": "string",
            "x-example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw"
          },
          {
            "name": "orderLineNumber",
            "in": "path",
            "description": "OrderLine Number",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-example": 1
          },
          {
            "name": "step",
            "in": "path",
            "description": "the step name needed",
            "required": true,
            "type": "string",
            "x-example": "Insurance"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectResponseOrderStep",
              "originalRef": "#/definitions/ObjectResponseOrderStep"
            }
          },
          "404": {
            "description": "Order or step not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/api/{order_id}/sales_partner": {
      "put": {
        "tags": [
          "OrderManagerIntegrationApiV3"
        ],
        "summary": "Updates the sales partner on the order",
        "description": "Update sales partner",
        "operationId": "updateSalesPartner_1",
        "consumes": [
          "application/vnd.volvocars.api.ordermanagerclient.salespartnerupdaterequest.v1+json"
        ],
        "produces": [
          "application/vnd.volvocars.api.response.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesPartnerUpdateRequest",
              "originalRef": "#/definitions/SalesPartnerUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated sales partner",
            "schema": {
              "$ref": "#/definitions/BaseResponse",
              "originalRef": "#/definitions/BaseResponse"
            }
          },
          "400": {
            "description": "Invalid update",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Order not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "authorization": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts": {
      "post": {
        "tags": [
          "Cart Operations"
        ],
        "summary": "Create new Cart",
        "description": "API to create shopping carts. This is one of the first APIs that is called for the eCommerce platform.\n\n## Simple Cart Creation\n<!-- theme: warning -->\n> #### Feature flags do not work with the simple cart\n>\n> For the purposes of brevity and simplicity, this example will create a cart **without feature flag support**. Not all functionality is available in the simple cart. See the feature flags section for more information.\n\nTo create an empty shopping cart, all we need to do is to make a `POST` to the `/v1/carts` resource with the only two required parameters:\n\n| Parameter | Description |\n| --------- | ----------- |\n| `businessLine`   | An identifier for which business line is using the cart. Business lines are used to separate different use cases for Volvo Cars. Typically, here, we'll use the business line `VCC`.\n| `market`  | An identifier for the given market. For a complete list of the supported markets, see the [Market Enum](https://gitlab.cdls.infrastructure.volvo.care/cds/common/signup-common/-/blob/master/model-object/src/main/java/com/volvo/ccdp/core/enums/Market.java). The notational standard for market is BCP-47 code, e.g. `en-US`.\n\nOn a successful shopping cart creation, we will receive a status of `200` and a response that inherits from ObjectResponse, as per the API Guild specification. Some key properties to note:\n\n\n| Parameter | Description |\n| --------- | ----------- |\n| `dataVersion`   | All data objects managed by Order Manager are strictly versions. Updates will be rejected with `409` if the wrong data version is supplied when trying to update a managed object. This prevents accidental overwriting of data.\n| `displayOrderId`  | A human-readable, non-consecutive identifier for the order. This identifier can be used when communicating with any human users, e.g. customers, support, etc.\n| `orderId` | The canonical order id that reveals absolutely no information about the order. This is the identifier to be used when making future API calls. Notably, `orderId` and `cartId` are the same value.\n| `operationId` | A unique value associated with the REST request that was just submitted. This ID is present on both successful and failed requests. If you encounter _any_ difficulties with the eCommerce platform, this ID will allow the problem to be located instantly in the server logs. **Always submit `operationId`** when reporting issues with the platform.\n\n## Cart Creation with Feature Flags\n\n<!-- theme: info -->\n>#### Customer Version Support\n>\n> This method supports multiple customer versions. The customer version is determined by the `modelVersion` attribute of the `Customer` object.\n> Make sure to set the correct version of `v1`, `v2` or `v3` in the `Customer` object, otherwise data processed by this method may be incorrect.\n\nIn order to unlock most of the functionality in the eCommerce platform, we need to enable feature flags. Feature flags are a mechanism that allows us to enable or disable features in the eCommerce platform,\nand are used heavily in the development and release process. Functionality that is gated behind a feature flag (even if the feature flag is on by default) will not be available unless feature\nflags have been initialized. See [Active Feature Flags](https://cds.pages.gitlab.cdls.infrastructure.volvo.care/ce/ecom-docs/user/active-feature-flags?id=override-by-featureflagdeterminants) for features that can be enabled by feature flags.\n\nTo initialize feature flags, the caller must supply `customer.featureFlagDeterminants` so that the feature flags can be evaluated. The following properties are used for feature flag determinants:\n\n| Property | Description |\n| -------- | ----------- |\n| `ip` | The IP address of the user of the application. This is used in feature flag rollouts (e.g. 50% rollout). If not supplied, the result is undefined. |\n| `userAgent` | The user agent header of the user's web browser. This is used to provide **dark launch capability**. Customized user agent strings are used to force a flag to turn on or off from a web browser. See [Enabling Flags by User Agent](https://cds.pages.gitlab.cdls.infrastructure.volvo.care/ce/ecom-docs/user/active-feature-flags?id=enable-by-user-agent-value). |\n| `devEnvironmentOverrides` | A map of feature flag names to values. This is used to override feature flags in the development environment. Note that the values must be the **string** `\"true\"` or `\"false\"`. |\n\nNote that the feature flag determinants are stored on the **customer** object:\n\n```json\n{\n  \"market\": \"de-DE\",\n  \"brand\": \"VCC\",\n  \"customer\": {\n    \"modelVersion\": \"v3\",\n    \"featureFlagDeterminants\": {\n      \"user-agent\": \"enable-flag-x\",\n      \"ip\": \"1.2.3.4\",\n      \"devEnvironmentOverrides\": {\n        \"feature_ecom_1234\": \"true\",\n        \"feature_ecom_1235\": \"false\"\n      }\n    }\n  }\n}\n```\n\n\n",
        "operationId": "createCart",
        "consumes": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json"
        ],
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CartRequest",
              "originalRef": "#/definitions/CartRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/by-displayid/{display_cart_id}": {
      "get": {
        "tags": [
          "Cart Operations"
        ],
        "summary": "Fetch cart by Display ID.",
        "description": "Retrieves a shopping cart by display ID.\n\n<!-- theme: warning -->\n>#### Privacy alert\n>\n> The `displayId` is intended primarily for **end user interactions** to provide customers with an easily digestable means to\n> identify a cart or order for the purposes of requesting support. Using the display ID for communicating with other systems\n> should only be done as a last resort as it may compromise users' privacy. For most use cases, please fetch carts by `cartId`/`orderId`.\n\nA shopping cart is an Order in the `NEW` or `CHECKOUT` states, as defined by the\n[Order Lifecycle](https://cds.pages.gitlab.cdls.infrastructure.volvo.care/ce/ecom-docs/user/data-model/data-model?id=high-level-order-lifecycle).\nWhile this method MAY return orders in other states, it should not be relied on for accessing Orders. The Cart API groups\nare intended to deal with Carts specifically.\n\nThe returned shopping cart will contain the `customer` and `product` information. As a consumer therefore, there is no need to independently resolve that information.\n\n### Security Considerations\nShopping carts are inexorably tied to an end user. This means that the cart can only be accessed by the end user that created it.\nThe enforcement mechanism is described in the [Order Facade](/operations/getOrderWithProductsAndCustomer) method in more detail. However,\nthe key element is that the cart must be authenticated with either:\n\n* A valid session token\n* A valid `guestAccessToken`\n\nFailure to provide proper authentication will result in a `404 Not Found` response. This is to prevent the API from exposing\ninformation about the existence of carts that the user does not have access to.\n",
        "operationId": "getCartByDisplayId",
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "display_cart_id",
            "in": "path",
            "description": "Display Cart ID",
            "required": true,
            "type": "string",
            "x-example": "US-100012"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "404": {
            "description": "Cart Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/change/{orderId}": {
      "post": {
        "tags": [
          "Cart Operations"
        ],
        "summary": "Create a change cart",
        "description": "Create a change cart. Customer information assign with the applied order will be copied to the new one.\nAfter the cart is checked out, and has become an Order, certain orders may goes to specific statuses that allow (or require) the customer to change some information of the order. This API is designed to create such a change cart request. After creating and checking out a Change Cart, the original order will be updated and the customer's order process can continue. When it's possible to create change carts, and what attributes can be modified, is controlled by different [OrderChangeType](https://gitlab.cdls.infrastructure.volvo.care/cds/om/order-manager/-/blob/master/order-manager-api/src/main/java/com/volvo/ccdp/ordermanager/v1/enums/OrderChangeType.java)s.\n\nWhen order is allowed to create a change, all we need to do is to make a `POST` to the `/v1/carts/change/{orderId}` resource with the only two required parameters:\n\n| Parameter | Description |\n| --------- | ----------- |\n| `orderId`   | The in-path parameter indicates the order ID of which the change will apply to.\n| `orderChangeType`  | An identifier for type of change. It should be one of [OrderChangeType] type enumeration defined at [OrderChangeType](https://gitlab.cdls.infrastructure.volvo.care/cds/om/order-manager/-/blob/master/order-manager-api/src/main/java/com/volvo/ccdp/ordermanager/v1/enums/OrderChangeType.java)\n\nChange carts are special types of carts, and only a subset of the Cart Service API may be available to them. This is controlled by different policies of `OrderChangeType`s. For example, a change cart for `PREORDER_CONVERSION` does not allow access to the update customer API, and a change cart for `UPDATE_PAYMENT_METHOD` can only make payment before checkout the change cart.\n",
        "operationId": "createOrderChangeRequest",
        "consumes": [
          "application/vnd.volvocars.api.x.changecartcreationrequest.v2+json"
        ],
        "produces": [
          "application/vnd.volvocars.api.x.changecart.v2+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "order to be changed",
            "required": true,
            "type": "string",
            "x-example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ChangeCartCreationRequest",
              "originalRef": "#/definitions/ChangeCartCreationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created change cart",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "400": {
            "description": "Change order type not recognized or order is not allowed to change at current status",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Order the change shall apply to is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/{cartId}": {
      "get": {
        "tags": [
          "Cart Operations"
        ],
        "summary": "Fetch a single shopping cart",
        "description": "Retrieves a shopping cart. A shopping cart is an Order in the `NEW` or `CHECKOUT` states, as defined by the\n[Order Lifecycle](https://cds.pages.gitlab.cdls.infrastructure.volvo.care/ce/ecom-docs/user/data-model/data-model?id=high-level-order-lifecycle).\nWhile this method MAY return orders in other states, it should not be relied on for accessing Orders. The Cart API groups\nare intended to deal with Carts specifically.\n\nThe returned shopping cart will contain the `customer` and `product` information. As a consumer therefore, there is no need to independently resolve that information.\n\n### Security Considerations\nShopping carts are inexorably tied to an end user. This means that the cart can only be accessed by the end user that created it.\nThe enforcement mechanism is described in the [Order Facade](/operations/getOrderWithProductsAndCustomer) method in more detail. However,\nthe key element is that the cart must be authenticated with either:\n\n* A valid session token\n* A valid `guestAccessToken`\n\nFailure to provide proper authentication will result in a `404 Not Found` response. This is to prevent the API from exposing\ninformation about the existence of carts that the user does not have access to.\n",
        "operationId": "getCart",
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "404": {
            "description": "Cart Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/{cartId}/checkout": {
      "put": {
        "tags": [
          "Cart Checkout"
        ],
        "summary": "Checkout Free Cart",
        "description": "Performs checkout on a free cart (cart with no price). The cart is locked and the status is set to ACTIVE. The caller should verify that the cart is actually free\nbefore calling this method, otherwise this method will fail.\n\nIf the cart is not free, this method will return a bad request error code. However, the cart will also have been locked and can no longer be modified. If the caller\nneeds to modify the cart to remove items that have a price, the caller must first [unlock](/operations/unlockCart) the cart.\n\n> Note that checkout on a free cart will automatically call lock if not already done. Therefore there is no reason to call lock before calling checkout on a free cart.\n\n### Paid carts\nCarts that require payment (i.e. cart price is greater than zero) cannot be processed using this method. In order to checkout a paid cart, the cart shall\nbe [locked](/operations/lockCart). Payment must be provided through the Payment Manager. Once Payment Manager has cleared\nthe payment, the cart will automatically be checked out. Note that unlocking a cart in the process of payment will abort the checkout process.\nSee the [lock cart method](/operations/lockCart) for more information.\n",
        "operationId": "checkoutCart",
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The checkout has been processed. Cart status is now ACTIVE or COMPLETE (depending on the BPM process), unless PaymentStatus is not OK, in which case no operation has happened. An updated version of the cart is returned.",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "400": {
            "description": "The cart could not be checked out due to an error. Likely the cart's price was not free. See the error response for details.",
            "schema": {
              "$ref": "#/definitions/CartCheckoutErrorResponse",
              "originalRef": "#/definitions/CartCheckoutErrorResponse"
            }
          },
          "404": {
            "description": "Cart Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/{cartId}/customer": {
      "put": {
        "tags": [
          "Cart Operations"
        ],
        "summary": "Update Customer in Cart",
        "description": "Updates the customer information of the shopping cart. This method is intended to be used when the customer information needs to be changed\nfrom a customer facing application (e.g. Online Checkout). The method takes a complete `Customer` object and updates the customer information. For a full description of the Customer\ndata model, please see the [Customer documentation in ecom docs](https://cds.pages.gitlab.cdls.infrastructure.volvo.care/ce/ecom-docs/user/data-model/customer).\n\n<!-- theme: info -->\n>#### Customer Version Support\n>\n> This method supports multiple customer versions. The customer version is determined by the `modelVersion` attribute of the `Customer` object.\n> Make sure to set the correct version of `v1`, `v2` or `v3` in the `Customer` object, otherwise data processed by this method may be incorrect.\n\n### Security Considerations\nShopping carts are inexorably tied to an end user. This means that the cart can only be accessed by the end user that created it.\nThe enforcement mechanism is described in the [Order Facade](/operations/getOrderWithProductsAndCustomer) method in more detail. However,\nthe key element is that the cart must be authenticated with either:\n\n* A valid session token\n* A valid `guestAccessToken`\n\nFailure to provide proper authentication will result in a `404 Not Found` response. This is to prevent the API from exposing\ninformation about the existence of carts that the user does not have access to.\n\n### Feature Flag Support\nIf the shopping cart was [created without feature flags](/operations/createCart), the update customer data method can be used to\ninitialize feature flags. This is **not a recommended way to use feature flags** and may be removed in the future. The same\n`featureFlagDetermiants` object is used to initialize feature flags in the [createCart](/operations/createCart) method.\n",
        "operationId": "addCustomerToCart",
        "consumes": [
          "application/vnd.volvocars.api.x.customer.v3+json",
          "application/vnd.volvocars.api.x.customer.v2+json",
          "application/vnd.volvocars.api.x.customer.v1+json"
        ],
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomerV3",
              "originalRef": "#/definitions/CustomerV3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "404": {
            "description": "Cart Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/{cartId}/delivery": {
      "put": {
        "tags": [
          "Cart Operations"
        ],
        "summary": "Update delivering partner (dealer)",
        "description": "Updates the delivery partner information for a shopping cart. The delivery partner is the entity that helps us deliver the order to the customer. Typically, for car sales\nthe dealer is the delivery partner.\n\n### Pricing considerations\nThe delivery dealer may have different prices for the same product. Updating the dealer will cause the prices on the cart to be recalculated. This means the dealer update operation may take longer than expected.\n\n### Usage\nThis API can be called any time before the cart is checked out. The API must be called with the full details of the dealer. The primary key is the PARMA partner code of the dealer.\nThe source of truth is [RDM](https://rdm.volvocars.biz).\n",
        "operationId": "updateDeliveryInfo",
        "consumes": [
          "application/vnd.volvocars.api.x.partner.v1+json"
        ],
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Partner",
              "originalRef": "#/definitions/Partner"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "404": {
            "description": "Cart Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/{cartId}/finish": {
      "put": {
        "tags": [
          "Cart Checkout"
        ],
        "summary": "[DEPRECATED] Finish checkout",
        "description": "<!-- theme: danger -->\n>#### DEPRECATED METHOD\n>\n>This method is deprecated as of platform release 1.90 (June 2022) and should no longer be used. Please use [Checkout free cart](/operations/checkout) for free cart checkouts, and the Payment Manager for carts that require payment.\n\nAttempt to finish checking out a cart, validating that it is paid for, and initiating the BPM process.<p>The second step of checking out a cart, this method should be invoked after the cart has been locked. This method will verify that the amount paid is greater or equal to the cartPrice. If the amount paid is less than the cart price, it will return a bad request error code. If the amount paid is equal to or greater than the cart price, it will set the cart status to ACTIVE.<br/><br/>Note that if a payment object is supplied, and the payment status is not PaymentStatus.OK, then checkout will not be attempted.<br/><br/>This method <b>must always</b> be invoked whenever any payment is made to a cart, regardless of the cart's status.",
        "operationId": "checkoutCart_1",
        "consumes": [
          "application/vnd.volvocars.api.ordermanager.payment.v1+json"
        ],
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "VCC-Order-Checkout-Key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Payment information body. This is an optional parameter for a cart with a price of zero, but a mandatory parameter for when the cart has a positive price. <p> The payment info object serves as a primary description of external payment records. While only successful  (<kbd>PaymentStatus.OK</kbd>) payments will trigger the cart to transition to an active order, <b>all</b> payment attempts <b>must</b> be registered with this API. This includes failed and cancelled payments. <p> Note that payment validation will be performed when this parameter is present. That means there may be the following possible responses for this API: <ul> <li><kbd>200</kbd> if <kbd>PaymentStatus.OK</kbd>: Cart has been paid for and is now in state ACTIVE</li> <li><kbd>200</kbd> if <b>not</b> <kbd>PaymentStatus.OK</kbd>: Payment has been recorded but no further action has been taken</li> <li><kbd>400</kbd> if payment is valid: Insufficient amount has been paid for the cart (partial payment)</li> <li><kbd>400</kbd> if payment is invalid: Validation error of the payment object. Check the error for details.</li> </ul> See below for examples\n",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Payment",
              "originalRef": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The checkout has been processed. Cart status is now ACTIVE or COMPLETE (depending on the BPM process), unless PaymentStatus is not OK, in which case no operation has happened. An updated version of the cart is returned.",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "400": {
            "description": "The cart could not be checked out due to an error. Consult with the ",
            "schema": {
              "$ref": "#/definitions/CartCheckoutErrorResponse",
              "originalRef": "#/definitions/CartCheckoutErrorResponse"
            }
          },
          "404": {
            "description": "Cart Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/{cartId}/items": {
      "post": {
        "tags": [
          "Cart Contents"
        ],
        "summary": "Add Item to Cart",
        "description": "Add a single item to the cart as a new line. If added successfully, the cart's price is recalculated and the cart is returned.\n\n### Items from Product Catalog\nThis is the preferred way to add items to the cart. Any item added should have a `productId` that begins with `PCAT-` denoting\nthat it is derived from the Product Catalog. This allows the system to automatically look up the product details, and calculate\nthe price.\n",
        "operationId": "addItemToCart",
        "consumes": [
          "application/vnd.volvocars.api.x.cartitemrequest.v1+json"
        ],
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CartItemRequest",
              "originalRef": "#/definitions/CartItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item has been added to cart",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "404": {
            "description": "Cart Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/{cartId}/items/batch": {
      "post": {
        "tags": [
          "Cart Contents"
        ],
        "summary": "Batch Add Items to Cart",
        "description": "Add several items to the cart in a single request. This is equivalent to calling `addItemToCart` for each item.\nSee the [Add Item to Cart](/operations/addItemToCart) operation for more details.\n\n### Concurrency Notes\nThis operation is not atomic. While Cart Service will attempt to prepare as many calculations as possible ahead-of-time,\nthe actual writes to Order Manager may not be atomic. If a failure occurs during the batch operation, the cart may therefore\nbe in an inconsistent state.\n\n### Idempotency Notes\nThis method is **not** idempotent. Multiple invocations will create several lines for the same product.\n",
        "operationId": "addItemsToCart",
        "consumes": [
          "application/vnd.volvocars.api.x.cartitemrequest.v1+json"
        ],
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Cart ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ListRequestCartItemRequest",
              "originalRef": "#/definitions/ListRequestCartItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All items were successfully added to the cart",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "404": {
            "description": "Cart Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/{cartId}/items/{itemId}": {
      "put": {
        "tags": [
          "Cart Contents"
        ],
        "summary": "Update Cart Item",
        "description": "Attempts to update a cart item. This can be used to change the productId, quantity, sales model properties, etc",
        "operationId": "updateCartItem",
        "consumes": [
          "application/vnd.volvocars.api.x.cartitemrequest.v1+json"
        ],
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CartItemRequest",
              "originalRef": "#/definitions/CartItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Cart Contents"
        ],
        "summary": "Delete item from Cart",
        "operationId": "removeItemFromCart",
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/{cartId}/lock": {
      "put": {
        "tags": [
          "Cart Checkout"
        ],
        "summary": "Lock Cart for Payment",
        "description": "Prepares a paid cart (a cart with a price greater than zero) for the payment process. Locking a cart indicates that\nno more changes can be made to the cart. This also generates a `checkoutKey` that will be used to validate that\nthe cart contents have not been modified since the cart was locked.\n\nOnce a cart is locked, the payment process can be initiated by using Payment Manager. The payment process, when\nsuccessfully completed, will finish checking out the cart.\n\n### Carts with zero price (Free Carts)\nCarts with a price of zero (i.e. carts with no price) can be locked using this method. However, the cart will not be checked out.\nIn order to check out the cart, the caller must call the [checkoutCart](/operations/checkoutCart) method. Since that method\nwill lock the cart, if not already locked, there is no reason to call lock for carts that are free.\n\n### Background\nThe payment process is a long running process. It can take a long time to complete. Once the payment process completes,\nwe want to create an Order from the cart. However, if the contents of the have changed while payment is in progress,\nthis means the cart/order conversion is no longer valid and we cannot predict the end results.\n\nThe locking mechanism exists to counter this problem. When a cart is locked, it generates a unique `checkoutKey` that is\nsent to Payment Manager. When payments are processed, they will be processed using this key. If the key does not match,\nthe cart will not be automatically checked out.\n\n### Idempotency\nThe lock method is idempotent. Multiple calls to lock will not change the contents of the cart, or the value of\nthe `checkoutKey`.\n",
        "operationId": "lockCart",
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The cart's state is `CHECKOUT` and the checkoutKey is set. The cart is locked and cannot be modified.",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "404": {
            "description": "Cart Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/{cartId}/salespartner": {
      "put": {
        "tags": [
          "Cart Operations"
        ],
        "summary": "Update selling partner",
        "description": "Updates the selling partner information on the order. The selling partner is the entity that helped\nus make this sale. This could be a dealer, a referrer, a leasing company, etc.\n\n### Adding a Sales Partner\nWhile the cart in the `NEW` state, it can be updated with a sales partner. To do so, send the sales partner information in the request body.\nThe sales partner information must contain the `salesPartnerType` attribute as well as the relevant attributes for the given sales partner:\n\n* Retail Assisted: `partnerCode` (minimum), see the object for more details\n* Leasing Company: `orderIdentificationNumber`\n\n### Removing a sales partner\nIf the sales partner is no longer relevant, the API can be called with an empty request body. This will remove the sales partner from the cart.\n\n",
        "operationId": "updateSalesPartner",
        "consumes": [
          "application/vnd.volvocars.api.x.salespartner.v1+json"
        ],
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "400": {
            "description": "Bad Cart operation",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Cart Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/carts/{cartId}/unlock": {
      "put": {
        "tags": [
          "Cart Checkout"
        ],
        "summary": "Unlock the Cart",
        "description": "Unlocks a locked cart, allowing modifications to the cart contents.\n\nSince locked carts cannot be modified in *any way*, any change to the cart ? such as changing the Customer information,\nadding or removing items, changing the shipping address, etc. ? will result in an error. The cart must be unlocked first,\nusing this method.\n\nNote that unlocking the cart will prevent it from being automatically checked out by any in-flight payment processes. Avoid\nunlocking carts unless the payment process hasn't started, or it has failed.\n\n### Idempotency\nThis method is idempotent with respect to the `checkoutKey` property. Invoking this method multiple times with the same\n`checkoutKey` will not change the contents of the cart. However, if the `checkoutKey` is different, the method will\nthrow an error, indicating the cart is still locked.\n",
        "operationId": "unlockCart",
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v2+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "VCC-Order-Checkout-Key",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The cart is unlocked",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "404": {
            "description": "Cart Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "A Conflict error response will be sent when the cart could not be unlocked because the\n`checkoutKey` supplied does not match the `checkoutKey` of the cart.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    },
    "/internal/ecomapi/v1/orders/{orderId}": {
      "get": {
        "tags": [
          "Order Facade"
        ],
        "summary": "Fetch Order with Products",
        "description": "## Overview\nFetches an Order with the Customer and Product information attached to it, the same\nway they would be for a Cart. This provides a straightforward way to retrieve Order+Customer+\nProduct data, eliminating some code duplication. Cart Service reuses the code to ensure the data model\nis consistent between both a Cart and a Decorated Order.\n\nThis API will **never** throw an exception based on Order status, and can thus be used to retrieve **both** `Cart`\nobjects and `Order` objects at any stage of their lifecycle.\n\nThis API is intended to be used by **Experience-Level APIs** for end users (i.e. customers). This API is not intended for usage\nby **Administrative APIs**, e.g. OM UI or other tools intended to be used by Volvo employees or administrators. Consequently,\nthis method is **not a replacement** for Order Manager's API. This method is intended as a convenience method for\ncustomer-facing clients that need the collated Order data without resorting to code duplication.\n\n\n## Security Considerations\n\nThis API requires **end-user authentication** (Access Token, Session or VolvoID) in order to return Order informaton.\n\nThere are two acceptable authentication methods:\n\n\n  * **Guest Access Token**: Provided as an optional header parameter, this verifies that the provided `orderId` and\n    `guestAccessToken` match the database values. The Order is returned, regardless of its age.\n\n\n  * **Session ID**: Provided as an optional header parameter, the `sessionId` verifies that the user is logged in and\n    authorized to access the order. Currently, no methods to log in are supported.\n\nFailure to provide correct credentials will result in a 404 response code.\n\n## Performance Considerations\nThis method provides a fully loaded Cart object, even for an old Order. There is a bandwidth penalty due to the larger object size,\nmaking this method unsuitable for when product information is not desired. However, if product data is desired,\nheavy caching is implemented to mitigate any performance penalty. Callers should **never** cache the returned value of this method.\n",
        "operationId": "getOrderWithProductsAndCustomer",
        "produces": [
          "application/vnd.volvocars.api.x.cart.v3+json",
          "application/vnd.volvocars.api.x.cart.v1+json",
          "application/vnd.volvocars.api.error.v1+json",
          "application/vnd.volvocars.api.response.v1+json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "guestAccessToken",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Order found and authentication successful. The returned object shows the populated Order reusing the Cart data model.",
            "schema": {
              "$ref": "#/definitions/ObjectResponseCart",
              "originalRef": "#/definitions/ObjectResponseCart"
            }
          },
          "403": {
            "description": "Access could not be granted for the given order due to insufficient access in the incoming request.",
            "schema": {
              "$ref": "#/definitions/CartAuthorizationErrorResponse",
              "originalRef": "#/definitions/CartAuthorizationErrorResponse"
            }
          },
          "404": {
            "description": "Order not found **or authentication failed**. If you get a 404 when an Order was expected, check the guestAccessToken and/or session data.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse",
              "originalRef": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "session": [],
            "userKey": []
          },
          {
            "token": [],
            "userKey": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "app_id": {
      "description": "Application ID (Does not work currently)",
      "type": "apiKey",
      "name": "app_id",
      "in": "header"
    },
    "app_key": {
      "description": "Application Key (Does not work currently)",
      "type": "apiKey",
      "name": "app_key",
      "in": "header"
    },
    "authorization": {
      "description": "CDSID Azure OpenID token or VolvoID token",
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    },
    "session": {
      "description": "Uses the VCC session for authorization purposes. Orders can be read if the given session has the correct access privileges.",
      "type": "apiKey",
      "name": "vcc-session",
      "in": "header"
    },
    "token": {
      "description": "Uses the Guest Access Token for authorization purposes. Orders can be read if the guest access token matches.",
      "type": "apiKey",
      "name": "guestAccessToken",
      "in": "header"
    },
    "userKey": {
      "description": "User Key (Current authentication method)",
      "type": "apiKey",
      "name": "user-key",
      "in": "header"
    }
  },
  "definitions": {
    "AbandonedTracking": {
      "type": "object",
      "properties": {
        "emailCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of abandoned reminder emails sent"
        },
        "lastEmailTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Last email timestamp"
        },
        "status": {
          "type": "string",
          "description": "Abandoned status",
          "enum": [
            "ABANDON_REMINDER",
            "ABANDONED",
            "REACTIVATED"
          ]
        },
        "statusUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Status updated timestamp"
        }
      },
      "description": "Abandoned tracking details"
    },
    "Address": {
      "type": "object",
      "properties": {
        "addressType": {
          "type": "string",
          "description": "Address type",
          "enum": [
            "BILLING",
            "SHIPPING",
            "GARAGING",
            "CUSTOMER"
          ]
        },
        "city": {
          "type": "string",
          "example": "Minworth",
          "description": "The city, if any, within which the address resides."
        },
        "country": {
          "type": "string",
          "example": "United Kingdom",
          "description": "A human-readable, named version of the country. This MAY be regionalised if applicable. This field may not differ semantically from `countryCode`."
        },
        "countryCode": {
          "type": "string",
          "example": "GB",
          "description": "An `ISO_3166-1_alpha-2` country code for the given country. This field *must* be filled in when it is validated, and is considered the authoritative country field. It should be the primary field in use."
        },
        "county": {
          "type": "string",
          "example": "Collin",
          "description": "The county, if any, within which the address resides. Only for USA. Optional Field"
        },
        "district": {
          "type": "string",
          "example": "Sutton Coldfield",
          "description": "Many countries are divided up into districts for counting reasons. These may be counties, states or subregions based on the country's postal service."
        },
        "districtCode": {
          "type": "string",
          "example": "STN",
          "description": "The `ISO 3166-2` subdivision code of the district in question. This can be anywhere from 1 to 4 alphanumeric characters and provides a language-independent district identifier."
        },
        "line1": {
          "type": "string",
          "example": "Warwick House",
          "description": "The first address line. This is typically used in all conventions"
        },
        "line2": {
          "type": "string",
          "example": 18,
          "description": "The second address line. Often used to refer to apartments or other subdivisions."
        },
        "line3": {
          "type": "string",
          "example": "Minworth Industrial Park",
          "description": "The third address line. Can refer to regions, PO boxes, Care of, etc."
        },
        "line4": {
          "type": "string",
          "description": "The fourth address line. Uncommonly used."
        },
        "line5": {
          "type": "string",
          "description": "The fifth address line. Uncommonly used."
        },
        "postalCode": {
          "type": "string",
          "example": "B76 1AH",
          "description": "The postal code of the given address. The postal code is unique per country and depends on the given postal authority. As such it should be treated as a string."
        },
        "previous": {
          "type": "boolean",
          "example": true,
          "description": "If true, this is a previous address, not the current address."
        }
      },
      "description": "address"
    },
    "AddressV3": {
      "type": "object",
      "properties": {
        "addressRoles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "BILLING",
              "SHIPPING",
              "GARAGING",
              "MAILING",
              "UNKNOWN"
            ]
          }
        },
        "city": {
          "type": "string",
          "example": "Minworth",
          "description": "The city, if any, within which the address resides."
        },
        "country": {
          "type": "string",
          "example": "United Kingdom",
          "description": "A human-readable, named version of the country. This MAY be regionalised if applicable. This field may not differ semantically from `countryCode`."
        },
        "countryCode": {
          "type": "string",
          "example": "GB",
          "description": "An `ISO_3166-1_alpha-2` country code for the given country. This field *must* be filled in when it is validated, and is considered the authoritative country field. It should be the primary field in use."
        },
        "county": {
          "type": "string",
          "example": "Collin",
          "description": "The county, if any, within which the address resides. Only for USA. Optional Field"
        },
        "district": {
          "type": "string",
          "example": "Sutton Coldfield",
          "description": "Many countries are divided up into districts for counting reasons. These may be counties, states or subregions based on the country's postal service."
        },
        "districtCode": {
          "type": "string",
          "example": "STN",
          "description": "The `ISO 3166-2` subdivision code of the district in question. This can be anywhere from 1 to 4 alphanumeric characters and provides a language-independent district identifier."
        },
        "line1": {
          "type": "string",
          "example": "Warwick House",
          "description": "The first address line. This is typically used in all conventions"
        },
        "line2": {
          "type": "string",
          "example": 18,
          "description": "The second address line. Often used to refer to apartments or other subdivisions."
        },
        "line3": {
          "type": "string",
          "example": "Minworth Industrial Park",
          "description": "The third address line. Can refer to regions, PO boxes, Care of, etc."
        },
        "line4": {
          "type": "string",
          "description": "The fourth address line. Uncommonly used."
        },
        "line5": {
          "type": "string",
          "description": "The fifth address line. Uncommonly used."
        },
        "order": {
          "type": "integer",
          "format": "int32"
        },
        "postalCode": {
          "type": "string",
          "example": "B76 1AH",
          "description": "The postal code of the given address. The postal code is unique per country and depends on the given postal authority. As such it should be treated as a string."
        },
        "previous": {
          "type": "boolean",
          "example": true,
          "description": "If true, this is a previous address, not the current address."
        }
      }
    },
    "Angle": {
      "type": "object",
      "properties": {
        "image": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image",
            "originalRef": "#/definitions/Image"
          }
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ApplicationParameters": {
      "type": "object",
      "properties": {
        "images": {
          "$ref": "#/definitions/Images",
          "originalRef": "#/definitions/Images"
        },
        "pdfurl": {
          "type": "string"
        },
        "returnurl": {
          "type": "string"
        }
      }
    },
    "ArchivalData": {
      "type": "object",
      "properties": {
        "archivedTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp in millis when the order was archived."
        },
        "reason": {
          "type": "string",
          "example": "ABANDONED",
          "description": "reason.",
          "enum": [
            "ABANDONED",
            "TASK_NON_RETRYABLE",
            "OTHER",
            "NONE_SPECIFIED"
          ]
        }
      },
      "description": "Archival data"
    },
    "BaseResponse": {
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string",
          "example": "5bde0cd3-be77-481b-9727-cdcb52eaf65e",
          "description": "The operation id that was assigned to the request"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The status code reflecting the HTTP status code returned for this response",
          "minimum": 100,
          "maximum": 600
        }
      }
    },
    "CarConfiguration": {
      "type": "object",
      "properties": {
        "brand": {
          "type": "string"
        },
        "co2": {
          "type": "string"
        },
        "efficiencyClass": {
          "type": "string"
        },
        "features": {
          "$ref": "#/definitions/Features",
          "originalRef": "#/definitions/Features"
        },
        "fuelConsumption": {
          "type": "string"
        },
        "informationalTaxes": {
          "$ref": "#/definitions/InformationalTaxes",
          "originalRef": "#/definitions/InformationalTaxes"
        },
        "isURAX": {
          "type": "string"
        },
        "isWLTP": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/ApplicationParameters",
          "originalRef": "#/definitions/ApplicationParameters"
        },
        "modelVersion": {
          "type": "string"
        },
        "modelyear": {
          "type": "string"
        },
        "nedcSummary": {
          "$ref": "#/definitions/NedcSummary",
          "originalRef": "#/definitions/NedcSummary"
        },
        "structureweek": {
          "type": "string"
        },
        "taxBase": {
          "type": "string"
        },
        "totalprice": {
          "$ref": "#/definitions/TotalPrice",
          "originalRef": "#/definitions/TotalPrice"
        },
        "variant": {
          "$ref": "#/definitions/Variant",
          "originalRef": "#/definitions/Variant"
        },
        "wltpSummary": {
          "$ref": "#/definitions/WltpSummary",
          "originalRef": "#/definitions/WltpSummary"
        }
      },
      "description": "Car configuration data"
    },
    "CarConfigurationV1": {
      "type": "object",
      "properties": {
        "carConfiguration": {
          "$ref": "#/definitions/CarConfiguration",
          "originalRef": "#/definitions/CarConfiguration"
        }
      },
      "description": "A vechicle purchase package, including car configuration"
    },
    "Cart": {
      "type": "object",
      "properties": {
        "abandonedTracking": {
          "$ref": "#/definitions/AbandonedTracking",
          "originalRef": "#/definitions/AbandonedTracking"
        },
        "archivalData": {
          "$ref": "#/definitions/ArchivalData",
          "originalRef": "#/definitions/ArchivalData"
        },
        "brand": {
          "type": "string",
          "description": "Brand",
          "enum": [
            "VCC",
            "POL",
            "WHOLESALE"
          ]
        },
        "businessLine": {
          "type": "string",
          "description": "Business Line",
          "enum": [
            "VCC",
            "POL",
            "WHOLESALE"
          ]
        },
        "cancelReason1": {
          "type": "string",
          "description": "Reason the order was cancelled (cancelReason1).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelReason2": {
          "type": "string",
          "description": "Sub-reason the order was cancelled (cancelReason2).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelReason3": {
          "type": "string",
          "description": "Sub-sub-reason the order was cancelled (cancelReason3).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancellationDescription": {
          "type": "string",
          "description": "Additional information about why the order was cancelled"
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason the order was cancelled.",
          "enum": [
            "NONE_SPECIFIED",
            "DELIVERY_TIME",
            "ALTERNATE_OFFER_OUTSIDE_VOLVO",
            "ALTERNATE_PRODUCT_OUTSIDE_VOLVO",
            "PERSONAL_SITUATION",
            "LACK_INFORMATION",
            "FINANCIAL_CONSTRAINT",
            "TAX_IMPLICATION",
            "NOT_IN_STOCK",
            "INSURANCE_DECLINED",
            "CREDIT_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "REQUIRED_USER_ACTION_TIMED_OUT",
            "INITIAL_OFFER_IS_NOT_ALL_INCLUSIVE",
            "DUPLICATE_ORDER",
            "DELAY_PAYMENT_VERIFICATION",
            "PRODUCT_CUSTOMER_FIT",
            "WRONG_ORDER",
            "CUSTOMER_DECLINED_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "CUSTOMER_UNRESPONSIVE",
            "RESERVATION_FAILED",
            "FLEET_ACCOUNT_VERIFICATION_DECLINED",
            "FLEET_ACCOUNT_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_VIA_FLEET_ACCOUNT_MASTER",
            "CANCELLED_VIA_FLEET_ACCOUNT_MASTER_OTHER",
            "OTHER",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelledBy": {
          "type": "string",
          "description": "Identifier for who cancelled this order"
        },
        "checkoutKey": {
          "type": "string",
          "example": "6efc160f-0b82-41b0-8fef-1e5547619792",
          "description": "Checkout key"
        },
        "clientProfile": {
          "$ref": "#/definitions/ClientProfile",
          "originalRef": "#/definitions/ClientProfile"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time the order was created"
        },
        "createdBy": {
          "type": "string",
          "description": "Identifier for who created the order"
        },
        "currency": {
          "type": "string",
          "description": "A currency identifier for the shopping cart. Optional in the create cart request. If not be specified, it will be set automatically depending on the given market. If the currency of the market is not in the [Currency Enum](https://gitlab.cdls.infrastructure.volvo.care/cds/common/signup-common/-/blob/master/model-object/src/main/java/com/volvo/ccdp/core/enums/Currency.java), it will be set to EUR as default. The notational standard for currency is ISO 4217 code, e.g. USD.",
          "enum": [
            "CAD",
            "CNY",
            "DKK",
            "EUR",
            "SEK",
            "USD",
            "NOK",
            "GBP"
          ]
        },
        "customer": {
          "$ref": "#/definitions/CustomerV3",
          "originalRef": "#/definitions/CustomerV3"
        },
        "customerId": {
          "type": "string",
          "description": "Id of the customer in the customer manager"
        },
        "dataVersion": {
          "type": "integer",
          "format": "int32",
          "example": 19,
          "description": "Data Version"
        },
        "displayOrderId": {
          "type": "string",
          "example": "US-0000476705",
          "description": "Display order id"
        },
        "ended": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the request was terminated (set to modified for existing orders)"
        },
        "featureFlagInformation": {
          "$ref": "#/definitions/FeatureFlagInformation",
          "originalRef": "#/definitions/FeatureFlagInformation"
        },
        "group": {
          "$ref": "#/definitions/Group",
          "originalRef": "#/definitions/Group"
        },
        "guestAccessToken": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Guest Access Token. Used for anonymous access to the order."
        },
        "market": {
          "type": "string",
          "example": "de-DE",
          "description": "Market",
          "enum": [
            "sq-AL",
            "es-AR",
            "hy-AM",
            "en-AM",
            "de-AT",
            "az-AZ",
            "be-BY",
            "nl-BE",
            "fr-BE",
            "bs-BA",
            "pt-BR",
            "bg-BG",
            "en-CA",
            "fr-CA",
            "es-CL",
            "zh-CN",
            "es-CO",
            "hr-HR",
            "en-CY",
            "cs-CZ",
            "da-DK",
            "es-DO",
            "es-EC",
            "et-ee",
            "fi-FI",
            "fr-FR",
            "de-DE",
            "el-GR",
            "es-GT",
            "hu-HU",
            "is-IS",
            "ga-IE",
            "it-IT",
            "lv-LV",
            "lt-LT",
            "fr-LU",
            "mk-MK",
            "en-MT",
            "es-MX",
            "ro-MD",
            "ru-MD",
            "sr-ME",
            "nl-NL",
            "nb-NO",
            "es-PY",
            "es-PE",
            "pl-PL",
            "pt-PT",
            "en-PR",
            "es-PR",
            "ro-RO",
            "ru-RU",
            "sr-RS",
            "sk-SK",
            "sl-SI",
            "es-ES",
            "fi-SE",
            "sv-SE",
            "lv-CH",
            "de-CH",
            "it-CH",
            "tr-TR",
            "uk-UA",
            "en-GB",
            "en-US",
            "es-US",
            "-INVALID"
          ]
        },
        "modelVersion": {
          "type": "string",
          "example": "v1",
          "description": "Model Version"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time the order was last modified"
        },
        "modifiedBy": {
          "type": "string",
          "description": "Identifier for who last modified this order"
        },
        "nextOrderLineNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Next order line number "
        },
        "orderId": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Order id"
        },
        "orderLines": {
          "type": "array",
          "description": "Line items on the order",
          "items": {
            "$ref": "#/definitions/OrderLine",
            "originalRef": "#/definitions/OrderLine"
          }
        },
        "orderStatus": {
          "type": "string",
          "description": "Status of the order",
          "enum": [
            "NEW",
            "CHECKOUT",
            "ACTIVE",
            "CHANGE_IN_PROGRESS",
            "COMPLETED",
            "CANCEL_REVIEW",
            "CANCEL_IN_PROGRESS",
            "CANCELLED"
          ]
        },
        "orderType": {
          "type": "string",
          "example": "BASIC",
          "description": "Order Type",
          "enum": [
            "BASIC",
            "CHANGE"
          ]
        },
        "partner": {
          "$ref": "#/definitions/Partner",
          "originalRef": "#/definitions/Partner"
        },
        "payments": {
          "type": "array",
          "description": "Payments made on the order",
          "items": {
            "$ref": "#/definitions/Payment",
            "originalRef": "#/definitions/Payment"
          }
        },
        "preOrder": {
          "$ref": "#/definitions/OrderReference",
          "originalRef": "#/definitions/OrderReference"
        },
        "price": {
          "type": "number",
          "description": "Order Price, sum of all the order line item price"
        },
        "processVariants": {
          "type": "array",
          "example": "B2B",
          "description": "Process variable for an order",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "example": "B2B",
            "description": "Process variable for an order",
            "enum": [
              "B2B",
              "FLEET_SALES",
              "FLEET_LEASING_COMPANY",
              "FREEDOM_FUND"
            ]
          }
        },
        "salesPartner": {
          "$ref": "#/definitions/SalesPartner",
          "originalRef": "#/definitions/SalesPartner"
        },
        "skipCustomerCancellationEmail": {
          "type": "boolean",
          "description": "flag to disable sending cancellation email - default should be false if not set"
        },
        "skipRefund": {
          "type": "boolean",
          "description": "cancel with out refund - mostly for preorders"
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the order was activated (set to created for existing orders)"
        },
        "testData": {
          "type": "boolean",
          "description": "Indicating whether this is a test order. If testData is true then return true, else if it has a customer entity and the customer's lastName is McVolvoface, it returns true, other cases returns false. Please make sure the customer object is set if want to check by the customer information."
        }
      },
      "description": "Cart contains order and customer information"
    },
    "CartAuthorizationError": {
      "type": "object",
      "properties": {
        "authentications": {
          "type": "object",
          "example": {
            "VOLVO_ID": true
          },
          "description": "The authentications(s) acceptable in this context.",
          "additionalProperties": {
            "type": "boolean",
            "example": false,
            "description": "The authentications(s) acceptable in this context."
          }
        },
        "authorizations": {
          "type": "object",
          "example": {
            "FLEET": true
          },
          "description": "The authorization(s) acceptable in this context.",
          "additionalProperties": {
            "type": "boolean",
            "example": false,
            "description": "The authorization(s) acceptable in this context."
          }
        },
        "description": {
          "type": "string",
          "example": "The resource at `/get/ok` was not found.",
          "description": "Human-readable description, if available, of what happened. This can be useful to inform a consumer of the nature of an error. This *should* be disabled in production"
        },
        "details": {
          "$ref": "#/definitions/Detail",
          "originalRef": "#/definitions/Detail"
        },
        "message": {
          "type": "string",
          "example": "NOT FOUND",
          "description": "A simple string reflecting the error. This should be an ENUM or similar predictable error code"
        }
      }
    },
    "CartAuthorizationErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/CartAuthorizationError",
          "originalRef": "#/definitions/CartAuthorizationError"
        },
        "operationId": {
          "type": "string",
          "example": "5bde0cd3-be77-481b-9727-cdcb52eaf65e",
          "description": "The operation id that was assigned to the request"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The status code reflecting the HTTP status code returned for this response",
          "minimum": 100,
          "maximum": 600
        }
      }
    },
    "CartCheckoutError": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "The resource at `/get/ok` was not found.",
          "description": "Human-readable description, if available, of what happened. This can be useful to inform a consumer of the nature of an error. This *should* be disabled in production"
        },
        "details": {
          "$ref": "#/definitions/Detail",
          "originalRef": "#/definitions/Detail"
        },
        "errorType": {
          "type": "string",
          "enum": [
            "PAYMENT_MANDATORY_AMOUNT",
            "PAYMENT_MANDATORY_CHECKOUT_KEY",
            "PAYMENT_MANDATORY_CURRENCY",
            "PAYMENT_MANDATORY_DATE",
            "PAYMENT_MANDATORY_SOURCE",
            "PAYMENT_MANDATORY_STATUS",
            "PAYMENT_MANDATORY_TYPE",
            "PAYMENT_MANDATORY_TRANSACTION_ID"
          ]
        },
        "message": {
          "type": "string",
          "example": "NOT FOUND",
          "description": "A simple string reflecting the error. This should be an ENUM or similar predictable error code"
        }
      }
    },
    "CartCheckoutErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/CartCheckoutError",
          "originalRef": "#/definitions/CartCheckoutError"
        },
        "operationId": {
          "type": "string",
          "example": "5bde0cd3-be77-481b-9727-cdcb52eaf65e",
          "description": "The operation id that was assigned to the request"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The status code reflecting the HTTP status code returned for this response",
          "minimum": 100,
          "maximum": 600
        }
      }
    },
    "CartItemRequest": {
      "type": "object",
      "properties": {
        "campaign": {
          "type": "string",
          "description": "Campaign"
        },
        "choiceId": {
          "type": "string",
          "example": "PCAT-CuqHOUhyHOwKhRjVxCqRrwLtki",
          "description": "Product Choice id of the Parent orderline, if applicable"
        },
        "choices": {
          "type": "object",
          "example": {
            "abcd1234": "PCAT-KBLIwKQwCWbeFjwkLFikLYrmPh"
          },
          "description": "Product choices if this is a bundle type product, the key is choice group id, value is the selected product id. Non selected choices will have the default one added to the cart.",
          "additionalProperties": {
            "type": "string",
            "example": {
              "abcd1234": "PCAT-KBLIwKQwCWbeFjwkLFikLYrmPh"
            },
            "description": "Product choices if this is a bundle type product, the key is choice group id, value is the selected product id. Non selected choices will have the default one added to the cart."
          }
        },
        "financialIntent": {
          "type": "string",
          "example": "FINANCING_WITH_BANK",
          "description": "Financial Intent",
          "enum": [
            "NOT_APPLICABLE",
            "PAYING_OUT_OF_POCKET",
            "FINANCING_WITH_BANK",
            "FINANCING_WITH_LEASING_COMPANY",
            "NOT_SURE"
          ]
        },
        "offerId": {
          "type": "string",
          "description": "OfferId for Transfer Bundle Api"
        },
        "partOfLine": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Parent orderline number, if applicable"
        },
        "productId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Quantity",
          "default": 1
        },
        "salesModelInfo": {
          "$ref": "#/definitions/SalesModelInfo",
          "originalRef": "#/definitions/SalesModelInfo"
        },
        "salesModelVariants": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "OMS_MIGRATION",
              "OMS_TERMINAL_STATE",
              "OMS_POST_QUALIFICATION_STATE",
              "RETAIL_ASSISTED",
              "PREDEFINED_PRICE",
              "ORDER_MANAGER_PHASE_2",
              "OMS_LEGACY_ORDER",
              "CBV_SELECT_INVENTORY",
              "RISK_ASSESSMENT",
              "B2B",
              "PRE_ORDER_VERSION_2",
              "VISTA_INTEGRATION",
              "VISTA_NEED_CONFIRMATION",
              "CBV_SWITCH",
              "LEGACY_US_INSURANCE",
              "PAYMENT_AUTHORIZATION",
              "OM_CANCELLATION_FLOW",
              "BINDING_ORDER",
              "CBV_LITE_NO_INSURANCE",
              "PREORDER_BINDING_ORDER",
              "PREORDER_NEW_ORDER",
              "FLEET_SALES",
              "OFFLINE_INSURANCE",
              "FREEDOM_FUND"
            ]
          }
        },
        "termsAndConditionsPath": {
          "type": "string",
          "description": "TermAndConditionPath"
        }
      },
      "description": "Cart item to be added to Cart"
    },
    "CartRequest": {
      "type": "object",
      "properties": {
        "businessLine": {
          "type": "string",
          "description": "Business Line",
          "enum": [
            "VCC",
            "POL",
            "WHOLESALE"
          ]
        },
        "currency": {
          "type": "string",
          "description": "A currency identifier for the shopping cart. Optional in the create cart request. If not be specified, it will be set automatically depending on the given market. If the currency of the market is not in the [Currency Enum](https://gitlab.cdls.infrastructure.volvo.care/cds/common/signup-common/-/blob/master/model-object/src/main/java/com/volvo/ccdp/core/enums/Currency.java), it will be set to EUR as default. The notational standard for currency is ISO 4217 code, e.g. USD.",
          "enum": [
            "CAD",
            "CNY",
            "DKK",
            "EUR",
            "SEK",
            "USD",
            "NOK",
            "GBP"
          ]
        },
        "customer": {
          "$ref": "#/definitions/CustomerV3",
          "originalRef": "#/definitions/CustomerV3"
        },
        "market": {
          "type": "string",
          "example": "de-DE",
          "description": "Market",
          "enum": [
            "sq-AL",
            "es-AR",
            "hy-AM",
            "en-AM",
            "de-AT",
            "az-AZ",
            "be-BY",
            "nl-BE",
            "fr-BE",
            "bs-BA",
            "pt-BR",
            "bg-BG",
            "en-CA",
            "fr-CA",
            "es-CL",
            "zh-CN",
            "es-CO",
            "hr-HR",
            "en-CY",
            "cs-CZ",
            "da-DK",
            "es-DO",
            "es-EC",
            "et-ee",
            "fi-FI",
            "fr-FR",
            "de-DE",
            "el-GR",
            "es-GT",
            "hu-HU",
            "is-IS",
            "ga-IE",
            "it-IT",
            "lv-LV",
            "lt-LT",
            "fr-LU",
            "mk-MK",
            "en-MT",
            "es-MX",
            "ro-MD",
            "ru-MD",
            "sr-ME",
            "nl-NL",
            "nb-NO",
            "es-PY",
            "es-PE",
            "pl-PL",
            "pt-PT",
            "en-PR",
            "es-PR",
            "ro-RO",
            "ru-RU",
            "sr-RS",
            "sk-SK",
            "sl-SI",
            "es-ES",
            "fi-SE",
            "sv-SE",
            "lv-CH",
            "de-CH",
            "it-CH",
            "tr-TR",
            "uk-UA",
            "en-GB",
            "en-US",
            "es-US",
            "-INVALID"
          ]
        },
        "testData": {
          "type": "boolean",
          "description": "Indicating whether this is a test order. If testData is true then return true, else if it has a customer entity and the customer's lastName is McVolvoface, it returns true, other cases returns false. Please make sure the customer object is set if want to check by the customer information."
        }
      },
      "description": "A CartRequest is the data needed and useful for creating a shopping cart"
    },
    "ChangeCart": {
      "type": "object",
      "properties": {
        "abandonedTracking": {
          "$ref": "#/definitions/AbandonedTracking",
          "originalRef": "#/definitions/AbandonedTracking"
        },
        "appliedTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp for if/when the change request is applied"
        },
        "applyTo": {
          "type": "string",
          "description": "Reference to the order the change applies to"
        },
        "archivalData": {
          "$ref": "#/definitions/ArchivalData",
          "originalRef": "#/definitions/ArchivalData"
        },
        "brand": {
          "type": "string",
          "description": "Brand",
          "enum": [
            "VCC",
            "POL",
            "WHOLESALE"
          ]
        },
        "businessLine": {
          "type": "string",
          "description": "Business Line",
          "enum": [
            "VCC",
            "POL",
            "WHOLESALE"
          ]
        },
        "cancelReason1": {
          "type": "string",
          "description": "Reason the order was cancelled (cancelReason1).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelReason2": {
          "type": "string",
          "description": "Sub-reason the order was cancelled (cancelReason2).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelReason3": {
          "type": "string",
          "description": "Sub-sub-reason the order was cancelled (cancelReason3).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancellationDescription": {
          "type": "string",
          "description": "Additional information about why the order was cancelled"
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason the order was cancelled.",
          "enum": [
            "NONE_SPECIFIED",
            "DELIVERY_TIME",
            "ALTERNATE_OFFER_OUTSIDE_VOLVO",
            "ALTERNATE_PRODUCT_OUTSIDE_VOLVO",
            "PERSONAL_SITUATION",
            "LACK_INFORMATION",
            "FINANCIAL_CONSTRAINT",
            "TAX_IMPLICATION",
            "NOT_IN_STOCK",
            "INSURANCE_DECLINED",
            "CREDIT_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "REQUIRED_USER_ACTION_TIMED_OUT",
            "INITIAL_OFFER_IS_NOT_ALL_INCLUSIVE",
            "DUPLICATE_ORDER",
            "DELAY_PAYMENT_VERIFICATION",
            "PRODUCT_CUSTOMER_FIT",
            "WRONG_ORDER",
            "CUSTOMER_DECLINED_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "CUSTOMER_UNRESPONSIVE",
            "RESERVATION_FAILED",
            "FLEET_ACCOUNT_VERIFICATION_DECLINED",
            "FLEET_ACCOUNT_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_VIA_FLEET_ACCOUNT_MASTER",
            "CANCELLED_VIA_FLEET_ACCOUNT_MASTER_OTHER",
            "OTHER",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelledBy": {
          "type": "string",
          "description": "Identifier for who cancelled this order"
        },
        "changedBy": {
          "type": "string",
          "description": "email (CDSID) of the user who initiated the change"
        },
        "checkoutKey": {
          "type": "string",
          "example": "6efc160f-0b82-41b0-8fef-1e5547619792",
          "description": "Checkout key"
        },
        "clientProfile": {
          "$ref": "#/definitions/ClientProfile",
          "originalRef": "#/definitions/ClientProfile"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time the order was created"
        },
        "createdBy": {
          "type": "string",
          "description": "Identifier for who created the order"
        },
        "currency": {
          "type": "string",
          "description": "A currency identifier for the shopping cart. Optional in the create cart request. If not be specified, it will be set automatically depending on the given market. If the currency of the market is not in the [Currency Enum](https://gitlab.cdls.infrastructure.volvo.care/cds/common/signup-common/-/blob/master/model-object/src/main/java/com/volvo/ccdp/core/enums/Currency.java), it will be set to EUR as default. The notational standard for currency is ISO 4217 code, e.g. USD.",
          "enum": [
            "CAD",
            "CNY",
            "DKK",
            "EUR",
            "SEK",
            "USD",
            "NOK",
            "GBP"
          ]
        },
        "customer": {
          "$ref": "#/definitions/CustomerV3",
          "originalRef": "#/definitions/CustomerV3"
        },
        "customerId": {
          "type": "string",
          "description": "Id of the customer in the customer manager"
        },
        "dataVersion": {
          "type": "integer",
          "format": "int32",
          "example": 19,
          "description": "Data Version"
        },
        "displayOrderId": {
          "type": "string",
          "example": "US-0000476705",
          "description": "Display order id"
        },
        "ended": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the request was terminated (set to modified for existing orders)"
        },
        "featureFlagInformation": {
          "$ref": "#/definitions/FeatureFlagInformation",
          "originalRef": "#/definitions/FeatureFlagInformation"
        },
        "group": {
          "$ref": "#/definitions/Group",
          "originalRef": "#/definitions/Group"
        },
        "guestAccessToken": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Guest Access Token. Used for anonymous access to the order."
        },
        "market": {
          "type": "string",
          "example": "de-DE",
          "description": "Market",
          "enum": [
            "sq-AL",
            "es-AR",
            "hy-AM",
            "en-AM",
            "de-AT",
            "az-AZ",
            "be-BY",
            "nl-BE",
            "fr-BE",
            "bs-BA",
            "pt-BR",
            "bg-BG",
            "en-CA",
            "fr-CA",
            "es-CL",
            "zh-CN",
            "es-CO",
            "hr-HR",
            "en-CY",
            "cs-CZ",
            "da-DK",
            "es-DO",
            "es-EC",
            "et-ee",
            "fi-FI",
            "fr-FR",
            "de-DE",
            "el-GR",
            "es-GT",
            "hu-HU",
            "is-IS",
            "ga-IE",
            "it-IT",
            "lv-LV",
            "lt-LT",
            "fr-LU",
            "mk-MK",
            "en-MT",
            "es-MX",
            "ro-MD",
            "ru-MD",
            "sr-ME",
            "nl-NL",
            "nb-NO",
            "es-PY",
            "es-PE",
            "pl-PL",
            "pt-PT",
            "en-PR",
            "es-PR",
            "ro-RO",
            "ru-RU",
            "sr-RS",
            "sk-SK",
            "sl-SI",
            "es-ES",
            "fi-SE",
            "sv-SE",
            "lv-CH",
            "de-CH",
            "it-CH",
            "tr-TR",
            "uk-UA",
            "en-GB",
            "en-US",
            "es-US",
            "-INVALID"
          ]
        },
        "modelVersion": {
          "type": "string",
          "example": "v1",
          "description": "Model Version"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time the order was last modified"
        },
        "modifiedBy": {
          "type": "string",
          "description": "Identifier for who last modified this order"
        },
        "nextOrderLineNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Next order line number "
        },
        "orderChangeType": {
          "type": "string",
          "example": "PREORDER_CONVERSION",
          "description": "Type of order change being requested",
          "enum": [
            "PREORDER_CONVERSION",
            "UPDATE_PRODUCT",
            "UPDATE_PAYMENT_METHOD",
            "UPDATE_MILEAGE"
          ]
        },
        "orderId": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Order id"
        },
        "orderLines": {
          "type": "array",
          "description": "Line items on the order",
          "items": {
            "$ref": "#/definitions/OrderLine",
            "originalRef": "#/definitions/OrderLine"
          }
        },
        "orderStatus": {
          "type": "string",
          "description": "Status of the order",
          "enum": [
            "NEW",
            "CHECKOUT",
            "ACTIVE",
            "CHANGE_IN_PROGRESS",
            "COMPLETED",
            "CANCEL_REVIEW",
            "CANCEL_IN_PROGRESS",
            "CANCELLED"
          ]
        },
        "orderType": {
          "type": "string",
          "example": "BASIC",
          "description": "Order Type",
          "enum": [
            "BASIC",
            "CHANGE"
          ]
        },
        "partner": {
          "$ref": "#/definitions/Partner",
          "originalRef": "#/definitions/Partner"
        },
        "payments": {
          "type": "array",
          "description": "Payments made on the order",
          "items": {
            "$ref": "#/definitions/Payment",
            "originalRef": "#/definitions/Payment"
          }
        },
        "postChangeDescription": {
          "type": "string",
          "description": "updated value of the description"
        },
        "preChangeDescription": {
          "type": "string",
          "description": "current value of the description"
        },
        "preOrder": {
          "$ref": "#/definitions/OrderReference",
          "originalRef": "#/definitions/OrderReference"
        },
        "price": {
          "type": "number",
          "description": "Order Price, sum of all the order line item price"
        },
        "processVariants": {
          "type": "array",
          "example": "B2B",
          "description": "Process variable for an order",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "example": "B2B",
            "description": "Process variable for an order",
            "enum": [
              "B2B",
              "FLEET_SALES",
              "FLEET_LEASING_COMPANY",
              "FREEDOM_FUND"
            ]
          }
        },
        "salesPartner": {
          "$ref": "#/definitions/SalesPartner",
          "originalRef": "#/definitions/SalesPartner"
        },
        "skipCustomerCancellationEmail": {
          "type": "boolean",
          "description": "flag to disable sending cancellation email - default should be false if not set"
        },
        "skipRefund": {
          "type": "boolean",
          "description": "cancel with out refund - mostly for preorders"
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the order was activated (set to created for existing orders)"
        },
        "testData": {
          "type": "boolean",
          "description": "Indicating whether this is a test order. If testData is true then return true, else if it has a customer entity and the customer's lastName is McVolvoface, it returns true, other cases returns false. Please make sure the customer object is set if want to check by the customer information."
        }
      },
      "description": "Response body from the Api"
    },
    "ChangeCartCreationRequest": {
      "type": "object",
      "properties": {
        "orderChangeType": {
          "type": "string",
          "example": "PREORDER_CONVERSION",
          "description": "Type of order change being requested",
          "enum": [
            "PREORDER_CONVERSION",
            "UPDATE_PRODUCT",
            "UPDATE_PAYMENT_METHOD",
            "UPDATE_MILEAGE"
          ]
        }
      }
    },
    "Charge": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "vatPercentage": {
          "type": "string"
        }
      }
    },
    "ClientProfile": {
      "type": "object",
      "properties": {
        "deviceType": {
          "type": "string",
          "example": "Web",
          "description": "Device type",
          "enum": [
            "WEB",
            "IOS",
            "ANDROID",
            "UNKNOWN",
            "RETAILASSISTED"
          ]
        },
        "versionNumber": {
          "type": "string",
          "example": 1,
          "description": "Version Number of Mobile App"
        }
      },
      "description": "Client Profile details such as Device"
    },
    "Colour": {
      "type": "object",
      "properties": {
        "feature": {
          "$ref": "#/definitions/Feature",
          "originalRef": "#/definitions/Feature"
        }
      },
      "description": "Car Colour"
    },
    "ContractingPartyItem": {
      "type": "object",
      "properties": {
        "contractingParty": {
          "type": "string",
          "example": "freedomFund",
          "description": "contracting party"
        },
        "paymentPlan": {
          "type": "array",
          "description": "Payment plan for the product in order line. It contains the price information and when it needs to be paid. For example, for subscription there can be an entry for at checkout deposit and another entry of recurring payment after checkout.",
          "items": {
            "$ref": "#/definitions/PaymentPlanItem",
            "originalRef": "#/definitions/PaymentPlanItem"
          }
        }
      },
      "description": "contracting Parties information"
    },
    "CorporateEntity": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AddressV3",
            "originalRef": "#/definitions/AddressV3"
          }
        },
        "cdbId": {
          "type": "string",
          "description": "Organizations Cdb id"
        },
        "displayName": {
          "type": "string",
          "description": "Organizations display name, required if customer type is ORGANIZATION."
        },
        "emails": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Email",
            "originalRef": "#/definitions/Email"
          }
        },
        "entityId": {
          "$ref": "#/definitions/ExternalReferenceId",
          "originalRef": "#/definitions/ExternalReferenceId"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "ID of the Actor, assigned by Customer Manager"
        },
        "legalEntityType": {
          "type": "string",
          "example": "SELFEMPLOYED",
          "description": "Legal entity type used for business-to-business sales. This describes what kind of legal entity is performing the purchase. May be any value from the enum, or <kbd>null</kbd> if unspecified/not b2b customer.",
          "enum": [
            "NONE",
            "SELFEMPLOYED",
            "ORGANIZATION",
            "ORGANIZATION_UNIT"
          ],
          "x-nullable": true
        },
        "order": {
          "type": "integer",
          "format": "int32"
        },
        "phoneNumbers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Phone",
            "originalRef": "#/definitions/Phone"
          }
        },
        "regName": {
          "type": "string",
          "description": "Organizations Register name, required if customer type is ORGANIZATION."
        },
        "regNumber": {
          "type": "string",
          "description": "Organization registration number, required if customer type is ORGANIZATION."
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AGENT",
              "APPROVER",
              "BILL_TO",
              "CONTACT",
              "OPERATOR",
              "PICKUP",
              "SHIP_TO",
              "SOLD_TO",
              "SIGNATORY"
            ]
          }
        },
        "vatNumber": {
          "type": "string",
          "description": "Organization VAT number, required if customer type is ORGANIZATION and VAT is required."
        },
        "vatRegistrationStatus": {
          "type": "string",
          "description": "Organization VAT number status",
          "enum": [
            "NOT_APPLICABLE",
            "REGISTERED",
            "NOT_REGISTERED"
          ]
        },
        "xdmId": {
          "type": "integer",
          "format": "int64",
          "description": "Xdm id of organization"
        }
      }
    },
    "Customer": {
      "type": "object",
      "required": [
        "customerType",
        "firstName",
        "lastName",
        "market"
      ],
      "properties": {
        "addresses": {
          "type": "array",
          "description": "Customer addresses",
          "items": {
            "$ref": "#/definitions/Address",
            "originalRef": "#/definitions/Address"
          }
        },
        "archivalData": {
          "$ref": "#/definitions/ArchivalData",
          "originalRef": "#/definitions/ArchivalData"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Date the customer object was created"
        },
        "crmId": {
          "type": "string",
          "example": 159731962,
          "description": "CRM id for the individual this customer represents. If the customer is an organization, it is the individual who is the contact for the organization."
        },
        "crmOrgId": {
          "type": "string",
          "example": 159731963,
          "description": "CRM id for the organization this customer represents, if it is an organization."
        },
        "customerId": {
          "type": "string",
          "example": "7641b3d1-4cfd-4894-9ea4-04640da8ae4a",
          "description": "Unique id of this customer object."
        },
        "customerType": {
          "type": "string",
          "description": "Customer type",
          "enum": [
            "INDIVIDUAL",
            "ORGANIZATION"
          ]
        },
        "dataVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Data version number, incremented each time the customer is updated"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time",
          "description": "Date-of-birth of the individual"
        },
        "email": {
          "type": "string",
          "example": "test@volvocars.com",
          "description": "Email address of the customer"
        },
        "emailOptIn": {
          "type": "boolean",
          "description": "If true, the individual agrees to receive email"
        },
        "featureFlagDeterminants": {
          "$ref": "#/definitions/FeatureFlagDeterminants",
          "originalRef": "#/definitions/FeatureFlagDeterminants"
        },
        "firstName": {
          "type": "string",
          "description": "Individuals first name"
        },
        "gender": {
          "type": "string",
          "example": "F",
          "description": "Gender of the individual",
          "enum": [
            "F",
            "M",
            "U"
          ]
        },
        "hasAcceptedTerms": {
          "type": "boolean",
          "description": "Has the customer accepted the terms and conditions?"
        },
        "initials": {
          "type": "string",
          "description": "Experian uses it to verify customers identity in NL"
        },
        "language": {
          "type": "string",
          "example": "en",
          "description": "ISO 639-1 code of the preferred language of the individual"
        },
        "lastName": {
          "type": "string",
          "description": "Individuals last name"
        },
        "legalEntityType": {
          "type": "string",
          "example": "SELFEMPLOYED",
          "description": "Legal entity type used for business-to-business sales. This describes what kind of legal entity is performing the purchase. May be any value from the enum, or <kbd>null</kbd> if unspecified/not b2b customer.",
          "enum": [
            "NONE",
            "SELFEMPLOYED",
            "ORGANIZATION",
            "ORGANIZATION_UNIT"
          ],
          "x-nullable": true
        },
        "lossyConversion": {
          "type": "boolean"
        },
        "mailOptIn": {
          "type": "boolean",
          "description": "If true, the individual agrees to receive regular mail"
        },
        "market": {
          "type": "string",
          "example": "en-US",
          "description": "Market where the customer is registered",
          "enum": [
            "sq-AL",
            "es-AR",
            "hy-AM",
            "en-AM",
            "de-AT",
            "az-AZ",
            "be-BY",
            "nl-BE",
            "fr-BE",
            "bs-BA",
            "pt-BR",
            "bg-BG",
            "en-CA",
            "fr-CA",
            "es-CL",
            "zh-CN",
            "es-CO",
            "hr-HR",
            "en-CY",
            "cs-CZ",
            "da-DK",
            "es-DO",
            "es-EC",
            "et-ee",
            "fi-FI",
            "fr-FR",
            "de-DE",
            "el-GR",
            "es-GT",
            "hu-HU",
            "is-IS",
            "ga-IE",
            "it-IT",
            "lv-LV",
            "lt-LT",
            "fr-LU",
            "mk-MK",
            "en-MT",
            "es-MX",
            "ro-MD",
            "ru-MD",
            "sr-ME",
            "nl-NL",
            "nb-NO",
            "es-PY",
            "es-PE",
            "pl-PL",
            "pt-PT",
            "en-PR",
            "es-PR",
            "ro-RO",
            "ru-RU",
            "sr-RS",
            "sk-SK",
            "sl-SI",
            "es-ES",
            "fi-SE",
            "sv-SE",
            "lv-CH",
            "de-CH",
            "it-CH",
            "tr-TR",
            "uk-UA",
            "en-GB",
            "en-US",
            "es-US",
            "-INVALID"
          ]
        },
        "middleName": {
          "type": "string",
          "description": "Individuals middle name"
        },
        "mobilePhone": {
          "type": "string",
          "example": "408-111-1111",
          "description": "Mobile phone number of customer, if different from phone"
        },
        "modelVersion": {
          "type": "string",
          "example": "v1",
          "description": "Version of the model."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Date the customer object was last modified"
        },
        "orgAddresses": {
          "type": "array",
          "description": "Organization addresses",
          "items": {
            "$ref": "#/definitions/Address",
            "originalRef": "#/definitions/Address"
          }
        },
        "orgDisplayName": {
          "type": "string",
          "description": "Organizations display name, required if customer type is ORGANIZATION."
        },
        "orgEmail": {
          "type": "string",
          "example": "test@volvocars.com",
          "description": "Email address of the organization"
        },
        "orgRegName": {
          "type": "string",
          "description": "Organization registered name, required if customer type is ORGANIZATION."
        },
        "orgRegNumber": {
          "type": "string",
          "description": "Organization registration number, required if customer type is ORGANIZATION."
        },
        "orgVatNumber": {
          "type": "string",
          "description": "Organization VAT number, required if customer type is ORGANIZATION and VAT is required."
        },
        "phone": {
          "type": "string",
          "example": "408-111-1111",
          "description": "Phone number of customer"
        },
        "retailerMarketingOptIn": {
          "type": "boolean",
          "description": "Indicate whether the customer has opted in to receive marketing material from the retailer"
        },
        "retailerMarketingOptInText": {
          "type": "string",
          "description": "The text information if a customer has opted in to receive marketing material from the retailer"
        },
        "smsOptIn": {
          "type": "boolean",
          "description": "If true, the individual agrees to receive sms messages"
        },
        "spinPersonNumber": {
          "type": "string",
          "description": "The Spinned person number"
        },
        "telephoneOptIn": {
          "type": "boolean",
          "description": "If true, the individual agrees to receive telephone calls"
        },
        "tempTransactId": {
          "type": "string",
          "description": "Temporary Id for authenticating returned user."
        },
        "testData": {
          "type": "boolean",
          "description": "Indicating whether this is a test customer. If testData is true then return true, else if the customer's lastName is McVolvoface, it returns true, other cases returns false."
        },
        "title": {
          "type": "string",
          "description": "Title of the individual"
        },
        "vatRegistrationStatus": {
          "type": "string",
          "description": "Organization VAT number status",
          "enum": [
            "NOT_APPLICABLE",
            "REGISTERED",
            "NOT_REGISTERED"
          ]
        },
        "volvoId": {
          "type": "string",
          "description": "The Volvo id of the individual"
        }
      },
      "description": "Customer"
    },
    "CustomerV3": {
      "type": "object",
      "required": [
        "customerType",
        "market"
      ],
      "properties": {
        "archivalData": {
          "$ref": "#/definitions/ArchivalData",
          "originalRef": "#/definitions/ArchivalData"
        },
        "corporateEntities": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/CorporateEntity",
            "originalRef": "#/definitions/CorporateEntity"
          }
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Date the customer object was created"
        },
        "customerId": {
          "type": "string",
          "example": "7641b3d1-4cfd-4894-9ea4-04640da8ae4a",
          "description": "Unique id of this customer object."
        },
        "customerType": {
          "type": "string",
          "description": "Customer type",
          "enum": [
            "INDIVIDUAL",
            "ORGANIZATION"
          ]
        },
        "dataVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Data version number, incremented each time the customer is updated"
        },
        "featureFlagDeterminants": {
          "$ref": "#/definitions/FeatureFlagDeterminants",
          "originalRef": "#/definitions/FeatureFlagDeterminants"
        },
        "hasAcceptedTerms": {
          "type": "boolean"
        },
        "individuals": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/NaturalPerson",
            "originalRef": "#/definitions/NaturalPerson"
          }
        },
        "language": {
          "type": "string",
          "example": "en",
          "description": "ISO 639-1 code of the preferred language of the individual"
        },
        "lossyConversion": {
          "type": "boolean",
          "description": "True if the conversion has been lossy, i.e. data has been lost during the customer version conversions. A lossily converted customer cannot be used to update Customer Manager"
        },
        "market": {
          "type": "string",
          "example": "en-US",
          "description": "Market where the customer is registered",
          "enum": [
            "sq-AL",
            "es-AR",
            "hy-AM",
            "en-AM",
            "de-AT",
            "az-AZ",
            "be-BY",
            "nl-BE",
            "fr-BE",
            "bs-BA",
            "pt-BR",
            "bg-BG",
            "en-CA",
            "fr-CA",
            "es-CL",
            "zh-CN",
            "es-CO",
            "hr-HR",
            "en-CY",
            "cs-CZ",
            "da-DK",
            "es-DO",
            "es-EC",
            "et-ee",
            "fi-FI",
            "fr-FR",
            "de-DE",
            "el-GR",
            "es-GT",
            "hu-HU",
            "is-IS",
            "ga-IE",
            "it-IT",
            "lv-LV",
            "lt-LT",
            "fr-LU",
            "mk-MK",
            "en-MT",
            "es-MX",
            "ro-MD",
            "ru-MD",
            "sr-ME",
            "nl-NL",
            "nb-NO",
            "es-PY",
            "es-PE",
            "pl-PL",
            "pt-PT",
            "en-PR",
            "es-PR",
            "ro-RO",
            "ru-RU",
            "sr-RS",
            "sk-SK",
            "sl-SI",
            "es-ES",
            "fi-SE",
            "sv-SE",
            "lv-CH",
            "de-CH",
            "it-CH",
            "tr-TR",
            "uk-UA",
            "en-GB",
            "en-US",
            "es-US",
            "-INVALID"
          ]
        },
        "modelVersion": {
          "type": "string",
          "example": "v2",
          "description": "Version of the model."
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Date the customer object was last modified"
        },
        "testData": {
          "type": "boolean",
          "description": "Indicating whether this is a test customer. If testData is true then return true, else false"
        }
      }
    },
    "DecisionReasonLog": {
      "type": "object",
      "properties": {
        "decisionReason": {
          "type": "string"
        },
        "updatedTimestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Detail": {
      "type": "object",
      "properties": {
        "info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelObject",
            "originalRef": "#/definitions/ModelObject"
          }
        }
      },
      "description": "Optional array with more detailed error information, to be determined by the API itself"
    },
    "DownstreamCarConfigurationV1Sku": {
      "type": "object",
      "properties": {
        "sku": {
          "$ref": "#/definitions/CarConfigurationV1",
          "originalRef": "#/definitions/CarConfigurationV1"
        },
        "skuType": {
          "type": "string",
          "enum": [
            "SIMPLE",
            "CARCONFIGURATIONV1"
          ]
        }
      }
    },
    "DownstreamSimpleSku": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "example": "VCC_DE_ACC_WALLBOX_UNIT"
        },
        "skuCategory": {
          "type": "string",
          "example": "SAP_S4"
        },
        "skuType": {
          "type": "string",
          "enum": [
            "SIMPLE",
            "CARCONFIGURATIONV1"
          ]
        }
      }
    },
    "DownstreamSkuV2": {
      "type": "object",
      "properties": {
        "skuType": {
          "type": "string",
          "enum": [
            "SIMPLE",
            "CARCONFIGURATIONV1"
          ]
        }
      }
    },
    "Email": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "emailRoles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "CONTACT",
              "INVOICE"
            ]
          }
        },
        "order": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "The resource at `/get/ok` was not found.",
          "description": "Human-readable description, if available, of what happened. This can be useful to inform a consumer of the nature of an error. This *should* be disabled in production"
        },
        "details": {
          "$ref": "#/definitions/Detail",
          "originalRef": "#/definitions/Detail"
        },
        "message": {
          "type": "string",
          "example": "NOT FOUND",
          "description": "A simple string reflecting the error. This should be an ENUM or similar predictable error code"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error",
          "originalRef": "#/definitions/Error"
        },
        "operationId": {
          "type": "string",
          "example": "5bde0cd3-be77-481b-9727-cdcb52eaf65e",
          "description": "The operation id that was assigned to the request"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The status code reflecting the HTTP status code returned for this response",
          "minimum": 100,
          "maximum": 600
        }
      }
    },
    "ExternalIntegrations": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "SSA Adapter",
          "description": "External integration system name"
        },
        "tasksToComplete": {
          "type": "array",
          "example": [
            "CancelSubscription"
          ],
          "description": "Tasks external system can complete",
          "items": {
            "type": "string",
            "example": [
              "CancelSubscription"
            ],
            "description": "Tasks external system can complete"
          }
        }
      },
      "description": "Metadata for external integrations"
    },
    "ExternalReferenceId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "system": {
          "type": "string",
          "enum": [
            "FLEET_PORTAL"
          ]
        }
      },
      "description": "An external reference holder"
    },
    "Feature": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "featureprice": {
          "$ref": "#/definitions/Featureprice",
          "originalRef": "#/definitions/Featureprice"
        },
        "isaccessory": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "vatIncluded": {
          "type": "string"
        }
      }
    },
    "FeatureFlagDeterminants": {
      "type": "object",
      "required": [
        "ip",
        "userAgent",
        "vccSession"
      ],
      "properties": {
        "acceptsFunctionalCookies": {
          "type": "boolean",
          "description": "Customer consent to use functional cookies - used for A/B testing"
        },
        "devEnvironmentOverrides": {
          "type": "object",
          "description": "Get custom feature flags for the development environment",
          "additionalProperties": {
            "type": "string",
            "description": "Get custom feature flags for the development environment"
          }
        },
        "googleAnalyticsCookie": {
          "type": "string",
          "description": "The user's Google Analytics cookie at the time of feature flag creation"
        },
        "ip": {
          "type": "string",
          "description": "The user's IP address at the time of feature flag creation"
        },
        "userAgent": {
          "type": "string",
          "description": "The user's user-agent string at the time of feature flag creation"
        },
        "vccSession": {
          "type": "string",
          "description": "The session ID associated with the initial load"
        }
      },
      "description": "Values used to determine which user group a customer belongs to."
    },
    "FeatureFlagInformation": {
      "type": "object",
      "properties": {
        "flags": {
          "type": "object",
          "description": "A map of feature flags with string keys and string values. This is only guaranteed to be present if state == INITIALIZED.",
          "additionalProperties": {
            "type": "string",
            "description": "A map of feature flags with string keys and string values. This is only guaranteed to be present if state == INITIALIZED."
          }
        },
        "state": {
          "type": "string",
          "description": "The state of the feature flags item. Feature flags are only usable if the state is INITIALIZED, and are only supported if the value is either NOT_INITIALIZED or INITIALIZED.",
          "enum": [
            "NOT_SUPPORTED",
            "NOT_INITIALIZED",
            "INITIALIZED"
          ]
        }
      },
      "description": "Feature flag information as of the creation of the order. This may be null if feature flag storage is not supported for the given order. These values are intended to be used in conjunction with the Feature Flags Java library."
    },
    "Featureprice": {
      "type": "object",
      "properties": {
        "charge": {
          "$ref": "#/definitions/Charge",
          "originalRef": "#/definitions/Charge"
        },
        "elementprice": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Features": {
      "type": "object",
      "properties": {
        "colour": {
          "$ref": "#/definitions/Colour",
          "originalRef": "#/definitions/Colour"
        },
        "options": {
          "$ref": "#/definitions/Options",
          "originalRef": "#/definitions/Options"
        },
        "packages": {
          "$ref": "#/definitions/Packages",
          "originalRef": "#/definitions/Packages"
        },
        "standardfeatures": {
          "$ref": "#/definitions/Standardfeatures",
          "originalRef": "#/definitions/Standardfeatures"
        },
        "upholstery": {
          "$ref": "#/definitions/Upholstery",
          "originalRef": "#/definitions/Upholstery"
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "feature": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Feature",
            "originalRef": "#/definitions/Feature"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "size": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Images": {
      "type": "object",
      "properties": {
        "view": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/View",
            "originalRef": "#/definitions/View"
          }
        }
      }
    },
    "InformationalTax": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "taxId": {
          "type": "integer",
          "format": "int32"
        },
        "taxVersionId": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "InformationalTaxes": {
      "type": "object",
      "properties": {
        "informationalTax": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InformationalTax",
            "originalRef": "#/definitions/InformationalTax"
          }
        },
        "informationalTaxList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InformationalTax",
            "originalRef": "#/definitions/InformationalTax"
          }
        },
        "informationalTaxObject": {
          "$ref": "#/definitions/InformationalTax",
          "originalRef": "#/definitions/InformationalTax"
        }
      }
    },
    "LeasingCompanySalesPartner": {
      "type": "object",
      "properties": {
        "orderIdentificationNumber": {
          "type": "string"
        },
        "salesPartnerType": {
          "type": "string",
          "example": "RETAILASSISTED",
          "description": "Sales partner type",
          "enum": [
            "RETAILASSISTED",
            "LEASING_COMPANY"
          ]
        }
      },
      "description": "Leasing Company Sales Partner"
    },
    "LegacyCart": {
      "type": "object",
      "properties": {
        "abandonedTracking": {
          "$ref": "#/definitions/AbandonedTracking",
          "originalRef": "#/definitions/AbandonedTracking"
        },
        "archivalData": {
          "$ref": "#/definitions/ArchivalData",
          "originalRef": "#/definitions/ArchivalData"
        },
        "brand": {
          "type": "string",
          "description": "Brand",
          "enum": [
            "VCC",
            "POL",
            "WHOLESALE"
          ]
        },
        "businessLine": {
          "type": "string",
          "description": "Business Line",
          "enum": [
            "VCC",
            "POL",
            "WHOLESALE"
          ]
        },
        "cancelReason1": {
          "type": "string",
          "description": "Reason the order was cancelled (cancelReason1).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelReason2": {
          "type": "string",
          "description": "Sub-reason the order was cancelled (cancelReason2).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelReason3": {
          "type": "string",
          "description": "Sub-sub-reason the order was cancelled (cancelReason3).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancellationDescription": {
          "type": "string",
          "description": "Additional information about why the order was cancelled"
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason the order was cancelled.",
          "enum": [
            "NONE_SPECIFIED",
            "DELIVERY_TIME",
            "ALTERNATE_OFFER_OUTSIDE_VOLVO",
            "ALTERNATE_PRODUCT_OUTSIDE_VOLVO",
            "PERSONAL_SITUATION",
            "LACK_INFORMATION",
            "FINANCIAL_CONSTRAINT",
            "TAX_IMPLICATION",
            "NOT_IN_STOCK",
            "INSURANCE_DECLINED",
            "CREDIT_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "REQUIRED_USER_ACTION_TIMED_OUT",
            "INITIAL_OFFER_IS_NOT_ALL_INCLUSIVE",
            "DUPLICATE_ORDER",
            "DELAY_PAYMENT_VERIFICATION",
            "PRODUCT_CUSTOMER_FIT",
            "WRONG_ORDER",
            "CUSTOMER_DECLINED_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "CUSTOMER_UNRESPONSIVE",
            "RESERVATION_FAILED",
            "FLEET_ACCOUNT_VERIFICATION_DECLINED",
            "FLEET_ACCOUNT_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_VIA_FLEET_ACCOUNT_MASTER",
            "CANCELLED_VIA_FLEET_ACCOUNT_MASTER_OTHER",
            "OTHER",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelledBy": {
          "type": "string",
          "description": "Identifier for who cancelled this order"
        },
        "checkoutKey": {
          "type": "string",
          "example": "6efc160f-0b82-41b0-8fef-1e5547619792",
          "description": "Checkout key"
        },
        "clientProfile": {
          "$ref": "#/definitions/ClientProfile",
          "originalRef": "#/definitions/ClientProfile"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time the order was created"
        },
        "createdBy": {
          "type": "string",
          "description": "Identifier for who created the order"
        },
        "currency": {
          "type": "string",
          "example": "USD",
          "description": "Currency used for this order. An order may only have one currency.",
          "enum": [
            "CAD",
            "CNY",
            "DKK",
            "EUR",
            "SEK",
            "USD",
            "NOK",
            "GBP"
          ]
        },
        "customer": {
          "$ref": "#/definitions/Customer",
          "originalRef": "#/definitions/Customer"
        },
        "customerId": {
          "type": "string",
          "description": "Id of the customer in the customer manager"
        },
        "dataVersion": {
          "type": "integer",
          "format": "int32",
          "example": 19,
          "description": "Data Version"
        },
        "displayOrderId": {
          "type": "string",
          "example": "US-0000476705",
          "description": "Display order id"
        },
        "ended": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the request was terminated (set to modified for existing orders)"
        },
        "featureFlagInformation": {
          "$ref": "#/definitions/FeatureFlagInformation",
          "originalRef": "#/definitions/FeatureFlagInformation"
        },
        "group": {
          "$ref": "#/definitions/Group",
          "originalRef": "#/definitions/Group"
        },
        "guestAccessToken": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Guest Access Token. Used for anonymous access to the order."
        },
        "market": {
          "type": "string",
          "example": "de-DE",
          "description": "Market",
          "enum": [
            "sq-AL",
            "es-AR",
            "hy-AM",
            "en-AM",
            "de-AT",
            "az-AZ",
            "be-BY",
            "nl-BE",
            "fr-BE",
            "bs-BA",
            "pt-BR",
            "bg-BG",
            "en-CA",
            "fr-CA",
            "es-CL",
            "zh-CN",
            "es-CO",
            "hr-HR",
            "en-CY",
            "cs-CZ",
            "da-DK",
            "es-DO",
            "es-EC",
            "et-ee",
            "fi-FI",
            "fr-FR",
            "de-DE",
            "el-GR",
            "es-GT",
            "hu-HU",
            "is-IS",
            "ga-IE",
            "it-IT",
            "lv-LV",
            "lt-LT",
            "fr-LU",
            "mk-MK",
            "en-MT",
            "es-MX",
            "ro-MD",
            "ru-MD",
            "sr-ME",
            "nl-NL",
            "nb-NO",
            "es-PY",
            "es-PE",
            "pl-PL",
            "pt-PT",
            "en-PR",
            "es-PR",
            "ro-RO",
            "ru-RU",
            "sr-RS",
            "sk-SK",
            "sl-SI",
            "es-ES",
            "fi-SE",
            "sv-SE",
            "lv-CH",
            "de-CH",
            "it-CH",
            "tr-TR",
            "uk-UA",
            "en-GB",
            "en-US",
            "es-US",
            "-INVALID"
          ]
        },
        "modelVersion": {
          "type": "string",
          "example": "v1",
          "description": "Model Version"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time the order was last modified"
        },
        "modifiedBy": {
          "type": "string",
          "description": "Identifier for who last modified this order"
        },
        "nextOrderLineNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Next order line number "
        },
        "orderId": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Order id"
        },
        "orderLines": {
          "type": "array",
          "description": "Line items on the order",
          "items": {
            "$ref": "#/definitions/OrderLine",
            "originalRef": "#/definitions/OrderLine"
          }
        },
        "orderStatus": {
          "type": "string",
          "description": "Status of the order",
          "enum": [
            "NEW",
            "CHECKOUT",
            "ACTIVE",
            "CHANGE_IN_PROGRESS",
            "COMPLETED",
            "CANCEL_REVIEW",
            "CANCEL_IN_PROGRESS",
            "CANCELLED"
          ]
        },
        "orderType": {
          "type": "string",
          "example": "BASIC",
          "description": "Order Type",
          "enum": [
            "BASIC",
            "CHANGE"
          ]
        },
        "partner": {
          "$ref": "#/definitions/Partner",
          "originalRef": "#/definitions/Partner"
        },
        "payments": {
          "type": "array",
          "description": "Payments made on the order",
          "items": {
            "$ref": "#/definitions/Payment",
            "originalRef": "#/definitions/Payment"
          }
        },
        "preOrder": {
          "$ref": "#/definitions/OrderReference",
          "originalRef": "#/definitions/OrderReference"
        },
        "price": {
          "type": "number",
          "description": "Order Price, sum of all the order line item price"
        },
        "processVariants": {
          "type": "array",
          "example": "B2B",
          "description": "Process variable for an order",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "example": "B2B",
            "description": "Process variable for an order",
            "enum": [
              "B2B",
              "FLEET_SALES",
              "FLEET_LEASING_COMPANY",
              "FREEDOM_FUND"
            ]
          }
        },
        "salesPartner": {
          "$ref": "#/definitions/SalesPartner",
          "originalRef": "#/definitions/SalesPartner"
        },
        "skipCustomerCancellationEmail": {
          "type": "boolean",
          "description": "flag to disable sending cancellation email - default should be false if not set"
        },
        "skipRefund": {
          "type": "boolean",
          "description": "cancel with out refund - mostly for preorders"
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the order was activated (set to created for existing orders)"
        },
        "testData": {
          "type": "boolean",
          "description": "Indicating whether this is a test order. If testData is true then return true, else if it has a customer entity and the customer's lastName is McVolvoface, it returns true, other cases returns false. Please make sure the customer object is set if want to check by the customer information."
        }
      },
      "description": "Cart contains order and customer information"
    },
    "LineBreakdownItem": {
      "type": "object",
      "properties": {
        "lineNumber": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Line number"
        },
        "paymentPlan": {
          "type": "array",
          "description": "Payment plan for the line item",
          "items": {
            "$ref": "#/definitions/PaymentPlanItem",
            "originalRef": "#/definitions/PaymentPlanItem"
          }
        },
        "productId": {
          "type": "string",
          "example": "car or mileage",
          "description": "price line product id"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Line number"
        }
      },
      "description": "Breakdown of product in order line. A car can contain sub products like tires, color etc. Each sub product will be an breakdown item"
    },
    "ListRequestCartItemRequest": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "request list data",
          "items": {
            "$ref": "#/definitions/CartItemRequest",
            "originalRef": "#/definitions/CartItemRequest"
          }
        }
      }
    },
    "Localization": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "example": "FullName"
        },
        "id": {
          "type": "string"
        },
        "locale": {
          "type": "string",
          "example": "en-US",
          "description": "ISO standard locale"
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metadata",
            "originalRef": "#/definitions/Metadata"
          }
        },
        "productId": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "example": "This is a name"
        }
      },
      "description": "Localized values or assets"
    },
    "MarketConfigurations": {
      "type": "object",
      "properties": {
        "brand": {
          "type": "string"
        },
        "customerType": {
          "type": "string"
        },
        "salesModel": {
          "type": "string"
        }
      },
      "description": "Available market configuration combinations"
    },
    "MarketInfo": {
      "type": "object",
      "properties": {
        "configurations": {
          "type": "array",
          "description": "Available market configuration combinations",
          "items": {
            "$ref": "#/definitions/MarketConfigurations",
            "originalRef": "#/definitions/MarketConfigurations"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "example": "Germany",
          "description": "Market name"
        }
      },
      "description": "Market configuration such as supported sales model and customer type of the product"
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ModelObject": {
      "type": "object"
    },
    "ModelPackage": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packagefeature": {
          "type": "array",
          "description": "Package feature",
          "items": {
            "$ref": "#/definitions/Packagefeature",
            "originalRef": "#/definitions/Packagefeature"
          }
        },
        "packageprice": {
          "$ref": "#/definitions/Packageprice",
          "originalRef": "#/definitions/Packageprice"
        }
      }
    },
    "NaturalPerson": {
      "type": "object",
      "required": [
        "firstName",
        "lastName"
      ],
      "properties": {
        "addresses": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AddressV3",
            "originalRef": "#/definitions/AddressV3"
          }
        },
        "cdbId": {
          "type": "string",
          "example": "7641b3d1-4cfd-4894-9ea4-04640da8ae4a",
          "description": "Unique id of this individual object."
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time",
          "description": "Date-of-birth of the individual"
        },
        "emails": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Email",
            "originalRef": "#/definitions/Email"
          }
        },
        "externalUserId": {
          "type": "string",
          "description": "The external user id of the individual to identify user using existing source"
        },
        "externalUserIdType": {
          "type": "string",
          "description": "type of the external user",
          "enum": [
            "BANKID",
            "NONE"
          ]
        },
        "firstName": {
          "type": "string",
          "description": "Individuals first name"
        },
        "gender": {
          "type": "string",
          "example": "F",
          "description": "Gender of the individual",
          "enum": [
            "F",
            "M",
            "U"
          ]
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "ID of the Actor, assigned by Customer Manager"
        },
        "individualId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "ID of the individual, assigned by Customer Manager"
        },
        "initials": {
          "type": "string",
          "description": "Experian uses it to verify customers identity in NL"
        },
        "lastName": {
          "type": "string",
          "description": "Individuals last name"
        },
        "middleName": {
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/Options",
          "originalRef": "#/definitions/Options"
        },
        "order": {
          "type": "integer",
          "format": "int32"
        },
        "phoneNumbers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Phone",
            "originalRef": "#/definitions/Phone"
          }
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "AGENT",
              "APPROVER",
              "BILL_TO",
              "CONTACT",
              "OPERATOR",
              "PICKUP",
              "SHIP_TO",
              "SOLD_TO",
              "SIGNATORY"
            ]
          }
        },
        "spinPersonNumber": {
          "type": "string",
          "description": "The Spinned person number"
        },
        "title": {
          "type": "string",
          "description": "Title of the individual"
        },
        "useOrgAddress": {
          "type": "boolean",
          "description": "Organization addresses is available or not"
        },
        "volvoId": {
          "type": "string",
          "description": "The Volvo id of the individual"
        }
      }
    },
    "NedcSummary": {
      "type": "object",
      "properties": {
        "combinedCo2Name": {
          "type": "string",
          "description": "Combined Co2Name"
        },
        "combinedCo2Unit": {
          "type": "string",
          "description": "Combined Co2Unit"
        },
        "combinedCo2Value": {
          "type": "string",
          "description": "Combined Co2 Value"
        },
        "electricEnergyConsumptionName": {
          "type": "string",
          "description": "Electric Energy Consumption Name"
        },
        "electricEnergyConsumptionUnit": {
          "type": "string",
          "description": "Electric Energy Consumption Unit"
        },
        "electricEnergyConsumptionValue": {
          "type": "string",
          "description": "Electric Energy ConsumptionValue"
        },
        "electricRangeName": {
          "type": "string",
          "description": "Electric Range Name"
        },
        "electricRangeUnit": {
          "type": "string",
          "description": "Electric Range Unit"
        },
        "electricRangeValue": {
          "type": "string",
          "description": "Electric Range Value"
        },
        "exUrbanFuelConsumptionName": {
          "type": "string",
          "description": "ExUrban Fuel Consumption Name"
        },
        "exUrbanFuelConsumptionUnit": {
          "type": "string",
          "description": "ExUrban Fuel ConsumptionUnit"
        },
        "exUrbanFuelConsumptionValue": {
          "type": "string",
          "description": "ExUrban Fuel ConsumptionValue"
        },
        "fuelConsumptionName": {
          "type": "string",
          "description": "Fuel Consumption Name"
        },
        "fuelConsumptionUnit": {
          "type": "string",
          "description": "Fuel Consumption Unit"
        },
        "fuelConsumptionValue": {
          "type": "string",
          "description": "Fuel Consumption Value"
        },
        "isOfficialName": {
          "type": "string",
          "description": "IsOfficialName"
        },
        "isOfficialValue": {
          "type": "string",
          "description": "IsOfficialValue"
        },
        "urbanFuelConsumptionName": {
          "type": "string",
          "description": "Urban Fuel Consumption Name"
        },
        "urbanFuelConsumptionUnit": {
          "type": "string",
          "description": "Urban Fuel Consumption Unit"
        },
        "urbanFuelConsumptionValue": {
          "type": "string",
          "description": "Urban Fuel ConsumptionValue"
        },
        "weightedCombinedCo2Name": {
          "type": "string",
          "description": "Weighted Combined Co2Name"
        },
        "weightedCombinedCo2Unit": {
          "type": "string",
          "description": "Weighted Combined Co2Unit"
        },
        "weightedCombinedCo2Value": {
          "type": "string",
          "description": "Weighted Combined Co2 Value"
        },
        "weightedFuelConsumptionName": {
          "type": "string",
          "description": "Weighted Fuel Consumption Name"
        },
        "weightedFuelConsumptionUnit": {
          "type": "string",
          "description": "Weighted Fuel ConsumptionUnit"
        },
        "weightedFuelConsumptionValue": {
          "type": "string",
          "description": "Weighted Fuel ConsumptionValue"
        }
      }
    },
    "ObjectResponseCart": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Cart",
          "originalRef": "#/definitions/Cart"
        },
        "operationId": {
          "type": "string",
          "example": "5bde0cd3-be77-481b-9727-cdcb52eaf65e",
          "description": "The operation id that was assigned to the request"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The status code reflecting the HTTP status code returned for this response",
          "minimum": 100,
          "maximum": 600
        }
      }
    },
    "ObjectResponseChangeCart": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ChangeCart",
          "originalRef": "#/definitions/ChangeCart"
        },
        "operationId": {
          "type": "string",
          "example": "5bde0cd3-be77-481b-9727-cdcb52eaf65e",
          "description": "The operation id that was assigned to the request"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The status code reflecting the HTTP status code returned for this response",
          "minimum": 100,
          "maximum": 600
        }
      }
    },
    "ObjectResponseLegacyCart": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/LegacyCart",
          "originalRef": "#/definitions/LegacyCart"
        },
        "operationId": {
          "type": "string",
          "example": "5bde0cd3-be77-481b-9727-cdcb52eaf65e",
          "description": "The operation id that was assigned to the request"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The status code reflecting the HTTP status code returned for this response",
          "minimum": 100,
          "maximum": 600
        }
      }
    },
    "ObjectResponseModelObject": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ModelObject",
          "originalRef": "#/definitions/ModelObject"
        },
        "operationId": {
          "type": "string",
          "example": "5bde0cd3-be77-481b-9727-cdcb52eaf65e",
          "description": "The operation id that was assigned to the request"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The status code reflecting the HTTP status code returned for this response",
          "minimum": 100,
          "maximum": 600
        }
      }
    },
    "ObjectResponseOrderStep": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/OrderStep",
          "originalRef": "#/definitions/OrderStep"
        },
        "operationId": {
          "type": "string",
          "example": "5bde0cd3-be77-481b-9727-cdcb52eaf65e",
          "description": "The operation id that was assigned to the request"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The status code reflecting the HTTP status code returned for this response",
          "minimum": 100,
          "maximum": 600
        }
      }
    },
    "ObjectResponseProductV2": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductV2",
          "originalRef": "#/definitions/ProductV2"
        },
        "operationId": {
          "type": "string",
          "example": "5bde0cd3-be77-481b-9727-cdcb52eaf65e",
          "description": "The operation id that was assigned to the request"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The status code reflecting the HTTP status code returned for this response",
          "minimum": 100,
          "maximum": 600
        }
      }
    },
    "Offer": {
      "type": "object",
      "properties": {
        "brand": {
          "type": "string"
        },
        "contractLength": {
          "type": "integer",
          "format": "int32",
          "example": 24,
          "description": "Length of the contract"
        },
        "customerType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "market": {
          "type": "string"
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metadata",
            "originalRef": "#/definitions/Metadata"
          }
        },
        "name": {
          "type": "string",
          "example": "XC40 BEV 24 Month Subscription for B2C",
          "description": "Offer name"
        },
        "product": {
          "$ref": "#/definitions/OneOfOfferProduct",
          "originalRef": "#/definitions/OneOfOfferProduct"
        },
        "replacedBy": {
          "type": "string"
        },
        "salesModel": {
          "type": "string"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validTo": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "A Commercial Offer is a Product (or Bundle) that is offered for a specified sales model."
    },
    "OmEventData": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "example": "{'param1':'value1'}",
          "description": "Parameters",
          "additionalProperties": {
            "type": "object",
            "example": "{'param1':'value1'}",
            "description": "Parameters"
          }
        },
        "eventName": {
          "type": "string",
          "example": "END",
          "description": "Name of event",
          "enum": [
            "START",
            "TAKE",
            "CREATE",
            "ASSIGNMENT",
            "COMPLETE",
            "DELETE",
            "END",
            "EXCEPTION",
            "TASK_CREATED",
            "TASK_COMPLETED",
            "PROCESS_COMPLETED",
            "PROCESS_COMPLETED_WITH_TERMINATE_END_EVENT",
            "PROCESS_COMPLETED_WITH_ERROR_END_EVENT",
            "PROCESS_COMPLETED_WITH_ESCALATION_END_EVENT",
            "PROCESS_CANCELLED",
            "ACTIVITY_CANCELLED"
          ]
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "c98880ca-3f6f-11e9-b210-d663bd873d93",
          "description": "Unique id"
        },
        "objectId": {
          "type": "string",
          "example": "c98880cb-3f6f-11e9-b210-d663bd873d93",
          "description": "The task/execution's Id who trigger the event"
        },
        "orderId": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Order Id"
        },
        "orderLineNumber": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Order line number"
        },
        "parentActivityId": {
          "type": "string",
          "description": "parent process name for this task"
        },
        "processDefinitionId": {
          "type": "string",
          "example": "ProtoProcess:5:f4e5836d-36ea-11e9-887e-0242ac120003",
          "description": "Process's definition Id"
        },
        "processInstanceId": {
          "type": "string",
          "example": "c98880cf-3f6f-11e9-b210-d663bd873d93",
          "description": "ProcessInstanceId"
        },
        "taskName": {
          "type": "string",
          "example": "AddInfo",
          "description": "Task's name"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "example": 1551808706000,
          "description": "Timestamp of event creation in milliseconds"
        },
        "vccOperationId": {
          "type": "string",
          "description": "VCC Operation Id"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Event version"
        }
      },
      "description": "Event data in event call back and event bus"
    },
    "OneOfOfferProduct": {
      "type": "object",
      "description": "Product or bundle for the offer"
    },
    "Options": {
      "type": "object",
      "properties": {
        "group": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group",
            "originalRef": "#/definitions/Group"
          }
        }
      },
      "description": "Car options"
    },
    "OrderCancellation": {
      "type": "object",
      "properties": {
        "cancelReason1": {
          "type": "string",
          "description": "Reason the order was cancelled (cancelReason1).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelReason2": {
          "type": "string",
          "description": "Sub-reason the order was cancelled (cancelReason2).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelReason3": {
          "type": "string",
          "description": "Sub-sub-reason the order was cancelled (cancelReason3).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancellationDescription": {
          "type": "string",
          "description": "Additional information about why the order was cancelled"
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason the order was cancelled.",
          "enum": [
            "NONE_SPECIFIED",
            "DELIVERY_TIME",
            "ALTERNATE_OFFER_OUTSIDE_VOLVO",
            "ALTERNATE_PRODUCT_OUTSIDE_VOLVO",
            "PERSONAL_SITUATION",
            "LACK_INFORMATION",
            "FINANCIAL_CONSTRAINT",
            "TAX_IMPLICATION",
            "NOT_IN_STOCK",
            "INSURANCE_DECLINED",
            "CREDIT_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "REQUIRED_USER_ACTION_TIMED_OUT",
            "INITIAL_OFFER_IS_NOT_ALL_INCLUSIVE",
            "DUPLICATE_ORDER",
            "DELAY_PAYMENT_VERIFICATION",
            "PRODUCT_CUSTOMER_FIT",
            "WRONG_ORDER",
            "CUSTOMER_DECLINED_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "CUSTOMER_UNRESPONSIVE",
            "RESERVATION_FAILED",
            "FLEET_ACCOUNT_VERIFICATION_DECLINED",
            "FLEET_ACCOUNT_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_VIA_FLEET_ACCOUNT_MASTER",
            "CANCELLED_VIA_FLEET_ACCOUNT_MASTER_OTHER",
            "OTHER",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelledBy": {
          "type": "string",
          "description": "Identifier for who cancelled this order"
        },
        "skipCustomerCancellationEmail": {
          "type": "boolean",
          "description": "flag to disable sending cancellation email - default should be false if not set"
        },
        "skipRefund": {
          "type": "boolean",
          "description": "cancel with out refund - mostly for preorders"
        }
      }
    },
    "OrderEntry": {
      "type": "object",
      "properties": {
        "abandonedTracking": {
          "$ref": "#/definitions/AbandonedTracking",
          "originalRef": "#/definitions/AbandonedTracking"
        },
        "archivalData": {
          "$ref": "#/definitions/ArchivalData",
          "originalRef": "#/definitions/ArchivalData"
        },
        "brand": {
          "type": "string",
          "description": "Brand",
          "enum": [
            "VCC",
            "POL",
            "WHOLESALE"
          ]
        },
        "businessLine": {
          "type": "string",
          "description": "Business Line",
          "enum": [
            "VCC",
            "POL",
            "WHOLESALE"
          ]
        },
        "cancelReason1": {
          "type": "string",
          "description": "Reason the order was cancelled (cancelReason1).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelReason2": {
          "type": "string",
          "description": "Sub-reason the order was cancelled (cancelReason2).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelReason3": {
          "type": "string",
          "description": "Sub-sub-reason the order was cancelled (cancelReason3).",
          "enum": [
            "CANCELLED_BY_CUSTOMER",
            "LIFE_EVENT",
            "RELOCATING",
            "FINANCIAL_SITUATION_CHANGED",
            "FAMILY_SITUATION_CHANGED",
            "EXTERNAL_SITUATION_CHANGED",
            "NONE_OF_THE_ABOVE_LIFE_EVENT",
            "FOUND_A_BETTER_OPTION",
            "WANT_TO_CHANGE_TO_A_DIFFERENT_MODEL",
            "WANT_TO_BUY_OR_LEASE_A_VOLVO",
            "WANT_TO_BUY_OR_LEASE_OR_SUBSCRIBE_ANOTHER_BRAND",
            "NONE_OF_THE_ABOVE_BETTER_OPTION",
            "UNSATISFIED_WITH_CUSTOMER_SUPPORT",
            "TOO_LONG_OR_NO_RESPONSE_TIME",
            "UNFRIENDLY_OR_UNPROFESSIONAL_BEHAVIOR",
            "UNABLE_TO_HELP_OR_MEET_EXPECTATIONS",
            "NONE_OF_THE_ABOVE_UNSATISFIED_CUSTOMER_SUPPORT",
            "TOO_EXPENSIVE",
            "DELIVERY_TIME_WAS_TOO_LONG",
            "ORDER_PLACED_ACCIDENTALLY",
            "UNINTENTIONAL_ORDER",
            "DUPLICATE_ORDER",
            "SPECIFICATION_NOT_MATCHING_NEEDS",
            "OTHER_OR_NO_REASON_SPECIFIED",
            "CANCELLED_BY_AGENT",
            "CUSTOMER_DID_NOT_RESPOND",
            "CUSTOMER_DID_NOT_FULFILL_REQUIREMENTS",
            "ORDER_CHANGED_BY_CUSTOMER",
            "NOT_IN_STOCK",
            "OTHER_CANCELLED_BY_AGENT",
            "CANCELLED_BY_SYSTEM",
            "INSURANCE_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_DECLINED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "PAYMENT_CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "CUSTOMER_ACTION_TIMED_OUT",
            "TIMEOUT_DUE_TO_DELAY_PAYMENT_VERIFICATION",
            "CUSTOMER_DECLINE_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "RESERVATION_FAILED",
            "FLEET",
            "FLEET_ACCOUNT_DECLINED",
            "FLEET_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_BY_FLEET_ACCOUNT_MASTER",
            "TEST_CASE",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancellationDescription": {
          "type": "string",
          "description": "Additional information about why the order was cancelled"
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason the order was cancelled.",
          "enum": [
            "NONE_SPECIFIED",
            "DELIVERY_TIME",
            "ALTERNATE_OFFER_OUTSIDE_VOLVO",
            "ALTERNATE_PRODUCT_OUTSIDE_VOLVO",
            "PERSONAL_SITUATION",
            "LACK_INFORMATION",
            "FINANCIAL_CONSTRAINT",
            "TAX_IMPLICATION",
            "NOT_IN_STOCK",
            "INSURANCE_DECLINED",
            "CREDIT_DECLINED",
            "INSURANCE_CANCELLED",
            "CREDIT_CANCELLED",
            "PAYMENT_CANCELLED",
            "CAPTURE_CANCELLED",
            "RISK_ASSESSMENT_DECLINED",
            "RISK_ASSESSMENT_CANCELLED",
            "REQUIRED_USER_ACTION_TIMED_OUT",
            "INITIAL_OFFER_IS_NOT_ALL_INCLUSIVE",
            "DUPLICATE_ORDER",
            "DELAY_PAYMENT_VERIFICATION",
            "PRODUCT_CUSTOMER_FIT",
            "WRONG_ORDER",
            "CUSTOMER_DECLINED_LEGAL_AGREEMENT",
            "CUSTOMER_DECLINE_HIRE_AGREEMENT",
            "CUSTOMER_UNRESPONSIVE",
            "RESERVATION_FAILED",
            "FLEET_ACCOUNT_VERIFICATION_DECLINED",
            "FLEET_ACCOUNT_DISCOUNT_PLAN_CHANGED",
            "CANCELLED_VIA_FLEET_ACCOUNT_MASTER",
            "CANCELLED_VIA_FLEET_ACCOUNT_MASTER_OTHER",
            "OTHER",
            "OTHER_CANCEL_REASON"
          ]
        },
        "cancelledBy": {
          "type": "string",
          "description": "Identifier for who cancelled this order"
        },
        "checkoutKey": {
          "type": "string",
          "example": "6efc160f-0b82-41b0-8fef-1e5547619792",
          "description": "Checkout key"
        },
        "clientProfile": {
          "$ref": "#/definitions/ClientProfile",
          "originalRef": "#/definitions/ClientProfile"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time the order was created"
        },
        "createdBy": {
          "type": "string",
          "description": "Identifier for who created the order"
        },
        "currency": {
          "type": "string",
          "example": "USD",
          "description": "Currency used for this order. An order may only have one currency.",
          "enum": [
            "CAD",
            "CNY",
            "DKK",
            "EUR",
            "SEK",
            "USD",
            "NOK",
            "GBP"
          ]
        },
        "customer": {
          "$ref": "#/definitions/CustomerV3",
          "originalRef": "#/definitions/CustomerV3"
        },
        "customerId": {
          "type": "string",
          "description": "Id of the customer in the customer manager"
        },
        "dataVersion": {
          "type": "integer",
          "format": "int32",
          "example": 19,
          "description": "Data Version"
        },
        "displayOrderId": {
          "type": "string",
          "example": "US-0000476705",
          "description": "Display order id"
        },
        "ended": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the request was terminated (set to modified for existing orders)"
        },
        "featureFlagInformation": {
          "$ref": "#/definitions/FeatureFlagInformation",
          "originalRef": "#/definitions/FeatureFlagInformation"
        },
        "group": {
          "$ref": "#/definitions/Group",
          "originalRef": "#/definitions/Group"
        },
        "guestAccessToken": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Guest Access Token. Used for anonymous access to the order."
        },
        "market": {
          "type": "string",
          "example": "de-DE",
          "description": "Market",
          "enum": [
            "sq-AL",
            "es-AR",
            "hy-AM",
            "en-AM",
            "de-AT",
            "az-AZ",
            "be-BY",
            "nl-BE",
            "fr-BE",
            "bs-BA",
            "pt-BR",
            "bg-BG",
            "en-CA",
            "fr-CA",
            "es-CL",
            "zh-CN",
            "es-CO",
            "hr-HR",
            "en-CY",
            "cs-CZ",
            "da-DK",
            "es-DO",
            "es-EC",
            "et-ee",
            "fi-FI",
            "fr-FR",
            "de-DE",
            "el-GR",
            "es-GT",
            "hu-HU",
            "is-IS",
            "ga-IE",
            "it-IT",
            "lv-LV",
            "lt-LT",
            "fr-LU",
            "mk-MK",
            "en-MT",
            "es-MX",
            "ro-MD",
            "ru-MD",
            "sr-ME",
            "nl-NL",
            "nb-NO",
            "es-PY",
            "es-PE",
            "pl-PL",
            "pt-PT",
            "en-PR",
            "es-PR",
            "ro-RO",
            "ru-RU",
            "sr-RS",
            "sk-SK",
            "sl-SI",
            "es-ES",
            "fi-SE",
            "sv-SE",
            "lv-CH",
            "de-CH",
            "it-CH",
            "tr-TR",
            "uk-UA",
            "en-GB",
            "en-US",
            "es-US",
            "-INVALID"
          ]
        },
        "modelVersion": {
          "type": "string",
          "example": "v1",
          "description": "Model Version"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time the order was last modified"
        },
        "modifiedBy": {
          "type": "string",
          "description": "Identifier for who last modified this order"
        },
        "nextOrderLineNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Next order line number "
        },
        "orderId": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Order id"
        },
        "orderLineEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLineEntry",
            "originalRef": "#/definitions/OrderLineEntry"
          }
        },
        "orderLines": {
          "type": "array",
          "description": "Line items on the order",
          "items": {
            "$ref": "#/definitions/OrderLine",
            "originalRef": "#/definitions/OrderLine"
          }
        },
        "orderStatus": {
          "type": "string",
          "description": "Status of the order",
          "enum": [
            "NEW",
            "CHECKOUT",
            "ACTIVE",
            "CHANGE_IN_PROGRESS",
            "COMPLETED",
            "CANCEL_REVIEW",
            "CANCEL_IN_PROGRESS",
            "CANCELLED"
          ]
        },
        "orderTrackingURL": {
          "type": "string",
          "description": "The order confirmation page URL"
        },
        "orderType": {
          "type": "string",
          "example": "BASIC",
          "description": "Order Type",
          "enum": [
            "BASIC",
            "CHANGE"
          ]
        },
        "partner": {
          "$ref": "#/definitions/Partner",
          "originalRef": "#/definitions/Partner"
        },
        "payments": {
          "type": "array",
          "description": "Payments made on the order",
          "items": {
            "$ref": "#/definitions/Payment",
            "originalRef": "#/definitions/Payment"
          }
        },
        "preOrder": {
          "$ref": "#/definitions/OrderReference",
          "originalRef": "#/definitions/OrderReference"
        },
        "price": {
          "type": "number",
          "description": "Order Price, sum of all the order line item price"
        },
        "processVariants": {
          "type": "array",
          "example": "B2B",
          "description": "Process variable for an order",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "example": "B2B",
            "description": "Process variable for an order",
            "enum": [
              "B2B",
              "FLEET_SALES",
              "FLEET_LEASING_COMPANY",
              "FREEDOM_FUND"
            ]
          }
        },
        "salesPartner": {
          "$ref": "#/definitions/SalesPartner",
          "originalRef": "#/definitions/SalesPartner"
        },
        "skipCustomerCancellationEmail": {
          "type": "boolean",
          "description": "flag to disable sending cancellation email - default should be false if not set"
        },
        "skipRefund": {
          "type": "boolean",
          "description": "cancel with out refund - mostly for preorders"
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the order was activated (set to created for existing orders)"
        },
        "testData": {
          "type": "boolean",
          "description": "Indicating whether this is a test order. If testData is true then return true, else if it has a customer entity and the customer's lastName is McVolvoface, it returns true, other cases returns false. Please make sure the customer object is set if want to check by the customer information."
        }
      },
      "description": "Order details with customer and product information"
    },
    "OrderLine": {
      "type": "object",
      "required": [
        "financialIntent"
      ],
      "properties": {
        "addedToCartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when current order line is added to cart"
        },
        "campaign": {
          "type": "string",
          "description": "Name of the campaign the item is sold in"
        },
        "cancelProcessId": {
          "type": "string",
          "description": "BPM cancel process id"
        },
        "cancelSteps": {
          "type": "array",
          "description": "Steps from Cancellation step template",
          "items": {
            "$ref": "#/definitions/Step",
            "originalRef": "#/definitions/Step"
          }
        },
        "cancelTasks": {
          "type": "array",
          "description": "List of the active tasks before Cancel review",
          "items": {
            "$ref": "#/definitions/Task",
            "originalRef": "#/definitions/Task"
          }
        },
        "carReservationStatus": {
          "type": "string",
          "description": "car reservation status for in-stock cars",
          "enum": [
            "RESERVING",
            "RESERVED",
            "UN_RESERVING",
            "UNRESERVED"
          ]
        },
        "choiceId": {
          "type": "string",
          "example": "PCAT-uIhkmaPhwFOKtVwfgLlLIGxcCo",
          "description": "The choice group id if product in this line is a choice in a bundle"
        },
        "comments": {
          "type": "string",
          "description": "Comments related to order line"
        },
        "dataVersion": {
          "type": "integer",
          "format": "int32",
          "example": 19,
          "description": "Data Version"
        },
        "financialIntent": {
          "type": "string",
          "description": "Financial Intent",
          "enum": [
            "NOT_APPLICABLE",
            "PAYING_OUT_OF_POCKET",
            "FINANCING_WITH_BANK",
            "FINANCING_WITH_LEASING_COMPANY",
            "NOT_SURE"
          ]
        },
        "inventoryType": {
          "type": "string",
          "enum": [
            "BTO",
            "STOCK"
          ]
        },
        "orderId": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Order id"
        },
        "orderLineNumber": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Order line number"
        },
        "orderLineStatus": {
          "type": "string",
          "description": "status of current order line",
          "enum": [
            "NEW",
            "ACTIVE",
            "COMPLETED",
            "CANCEL_REVIEW",
            "CANCEL_IN_PROGRESS",
            "CHANGE_IN_PROGRESS",
            "CANCELLED",
            "DENIED",
            "EXCEPTION",
            "NOT_INVOLVE",
            "NOT_INVOLVED"
          ]
        },
        "partOf": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Part of which bundle type order line, empty if not part of any"
        },
        "processId": {
          "type": "string",
          "description": "Process id"
        },
        "processVariables": {
          "type": "object",
          "description": "Process Variables",
          "additionalProperties": {
            "type": "object",
            "description": "Process Variables"
          }
        },
        "productId": {
          "type": "string",
          "example": "45c79796-5b1a-11e9-8647-d663bd873d93",
          "description": "Reference to the product id in the Catalog Service"
        },
        "productType": {
          "type": "string",
          "example": "CAR",
          "description": "Product type of this order line",
          "enum": [
            "ACCESSORY",
            "BUNDLE",
            "CAR",
            "SOFTOFFER",
            "MILEAGE",
            "PRE_ORDER"
          ]
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Quantity"
        },
        "queuedEvents": {
          "type": "array",
          "description": "Queued complete Task and BPM Events to consume",
          "items": {
            "$ref": "#/definitions/PendingCompleteEvent",
            "originalRef": "#/definitions/PendingCompleteEvent"
          }
        },
        "salesModelInfo": {
          "$ref": "#/definitions/SalesModelInfo",
          "originalRef": "#/definitions/SalesModelInfo"
        },
        "salesModelVariants": {
          "type": "array",
          "description": "Sales Model Variants applicable for this orderline. See https://volvocars.atlassian.net/wiki/spaces/CS/pages/1332052197/Sales+Model+Variants for more detail.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "description": "Sales Model Variants applicable for this orderline. See https://volvocars.atlassian.net/wiki/spaces/CS/pages/1332052197/Sales+Model+Variants for more detail.",
            "enum": [
              "OMS_MIGRATION",
              "OMS_TERMINAL_STATE",
              "OMS_POST_QUALIFICATION_STATE",
              "RETAIL_ASSISTED",
              "PREDEFINED_PRICE",
              "ORDER_MANAGER_PHASE_2",
              "OMS_LEGACY_ORDER",
              "CBV_SELECT_INVENTORY",
              "RISK_ASSESSMENT",
              "B2B",
              "PRE_ORDER_VERSION_2",
              "VISTA_INTEGRATION",
              "VISTA_NEED_CONFIRMATION",
              "CBV_SWITCH",
              "LEGACY_US_INSURANCE",
              "PAYMENT_AUTHORIZATION",
              "OM_CANCELLATION_FLOW",
              "BINDING_ORDER",
              "CBV_LITE_NO_INSURANCE",
              "PREORDER_BINDING_ORDER",
              "PREORDER_NEW_ORDER",
              "FLEET_SALES",
              "OFFLINE_INSURANCE",
              "FREEDOM_FUND"
            ]
          }
        },
        "steps": {
          "type": "array",
          "description": "Steps from step template",
          "items": {
            "$ref": "#/definitions/Step",
            "originalRef": "#/definitions/Step"
          }
        },
        "supportedSalesModelVariants": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "OMS_MIGRATION",
              "OMS_TERMINAL_STATE",
              "OMS_POST_QUALIFICATION_STATE",
              "RETAIL_ASSISTED",
              "PREDEFINED_PRICE",
              "ORDER_MANAGER_PHASE_2",
              "OMS_LEGACY_ORDER",
              "CBV_SELECT_INVENTORY",
              "RISK_ASSESSMENT",
              "B2B",
              "PRE_ORDER_VERSION_2",
              "VISTA_INTEGRATION",
              "VISTA_NEED_CONFIRMATION",
              "CBV_SWITCH",
              "LEGACY_US_INSURANCE",
              "PAYMENT_AUTHORIZATION",
              "OM_CANCELLATION_FLOW",
              "BINDING_ORDER",
              "CBV_LITE_NO_INSURANCE",
              "PREORDER_BINDING_ORDER",
              "PREORDER_NEW_ORDER",
              "FLEET_SALES",
              "OFFLINE_INSURANCE",
              "FREEDOM_FUND"
            ]
          }
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task",
            "originalRef": "#/definitions/Task"
          }
        },
        "termsAndConditions": {
          "$ref": "#/definitions/TermsAndConditions",
          "originalRef": "#/definitions/TermsAndConditions"
        }
      },
      "description": "Order Line"
    },
    "OrderLineEntry": {
      "type": "object",
      "required": [
        "financialIntent"
      ],
      "properties": {
        "addedToCartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when current order line is added to cart"
        },
        "campaign": {
          "type": "string",
          "description": "Name of the campaign the item is sold in"
        },
        "cancelProcessId": {
          "type": "string",
          "description": "BPM cancel process id"
        },
        "cancelSteps": {
          "type": "array",
          "description": "Steps from Cancellation step template",
          "items": {
            "$ref": "#/definitions/Step",
            "originalRef": "#/definitions/Step"
          }
        },
        "cancelTasks": {
          "type": "array",
          "description": "List of the active tasks before Cancel review",
          "items": {
            "$ref": "#/definitions/Task",
            "originalRef": "#/definitions/Task"
          }
        },
        "carReservationStatus": {
          "type": "string",
          "description": "car reservation status for in-stock cars",
          "enum": [
            "RESERVING",
            "RESERVED",
            "UN_RESERVING",
            "UNRESERVED"
          ]
        },
        "choiceId": {
          "type": "string",
          "example": "PCAT-uIhkmaPhwFOKtVwfgLlLIGxcCo",
          "description": "The choice group id if product in this line is a choice in a bundle"
        },
        "comments": {
          "type": "string",
          "description": "Comments related to order line"
        },
        "dataVersion": {
          "type": "integer",
          "format": "int32",
          "example": 19,
          "description": "Data Version"
        },
        "financialIntent": {
          "type": "string",
          "description": "Financial Intent",
          "enum": [
            "NOT_APPLICABLE",
            "PAYING_OUT_OF_POCKET",
            "FINANCING_WITH_BANK",
            "FINANCING_WITH_LEASING_COMPANY",
            "NOT_SURE"
          ]
        },
        "inventoryType": {
          "type": "string",
          "enum": [
            "BTO",
            "STOCK"
          ]
        },
        "orderId": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Order id"
        },
        "orderLineNumber": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Order line number"
        },
        "orderLineStatus": {
          "type": "string",
          "description": "status of current order line",
          "enum": [
            "NEW",
            "ACTIVE",
            "COMPLETED",
            "CANCEL_REVIEW",
            "CANCEL_IN_PROGRESS",
            "CHANGE_IN_PROGRESS",
            "CANCELLED",
            "DENIED",
            "EXCEPTION",
            "NOT_INVOLVE",
            "NOT_INVOLVED"
          ]
        },
        "partOf": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Part of which bundle type order line, empty if not part of any"
        },
        "processId": {
          "type": "string",
          "description": "Process id"
        },
        "processVariables": {
          "type": "object",
          "description": "Process Variables",
          "additionalProperties": {
            "type": "object",
            "description": "Process Variables"
          }
        },
        "product": {
          "$ref": "#/definitions/ProductV2",
          "originalRef": "#/definitions/ProductV2"
        },
        "productId": {
          "type": "string",
          "example": "45c79796-5b1a-11e9-8647-d663bd873d93",
          "description": "Reference to the product id in the Catalog Service"
        },
        "productType": {
          "type": "string",
          "example": "CAR",
          "description": "Product type of this order line",
          "enum": [
            "ACCESSORY",
            "BUNDLE",
            "CAR",
            "SOFTOFFER",
            "MILEAGE",
            "PRE_ORDER"
          ]
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Quantity"
        },
        "queuedEvents": {
          "type": "array",
          "description": "Queued complete Task and BPM Events to consume",
          "items": {
            "$ref": "#/definitions/PendingCompleteEvent",
            "originalRef": "#/definitions/PendingCompleteEvent"
          }
        },
        "salesModelInfo": {
          "$ref": "#/definitions/SalesModelInfo",
          "originalRef": "#/definitions/SalesModelInfo"
        },
        "salesModelVariants": {
          "type": "array",
          "description": "Sales Model Variants applicable for this orderline. See https://volvocars.atlassian.net/wiki/spaces/CS/pages/1332052197/Sales+Model+Variants for more detail.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "description": "Sales Model Variants applicable for this orderline. See https://volvocars.atlassian.net/wiki/spaces/CS/pages/1332052197/Sales+Model+Variants for more detail.",
            "enum": [
              "OMS_MIGRATION",
              "OMS_TERMINAL_STATE",
              "OMS_POST_QUALIFICATION_STATE",
              "RETAIL_ASSISTED",
              "PREDEFINED_PRICE",
              "ORDER_MANAGER_PHASE_2",
              "OMS_LEGACY_ORDER",
              "CBV_SELECT_INVENTORY",
              "RISK_ASSESSMENT",
              "B2B",
              "PRE_ORDER_VERSION_2",
              "VISTA_INTEGRATION",
              "VISTA_NEED_CONFIRMATION",
              "CBV_SWITCH",
              "LEGACY_US_INSURANCE",
              "PAYMENT_AUTHORIZATION",
              "OM_CANCELLATION_FLOW",
              "BINDING_ORDER",
              "CBV_LITE_NO_INSURANCE",
              "PREORDER_BINDING_ORDER",
              "PREORDER_NEW_ORDER",
              "FLEET_SALES",
              "OFFLINE_INSURANCE",
              "FREEDOM_FUND"
            ]
          }
        },
        "steps": {
          "type": "array",
          "description": "Steps from step template",
          "items": {
            "$ref": "#/definitions/Step",
            "originalRef": "#/definitions/Step"
          }
        },
        "supportedSalesModelVariants": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "OMS_MIGRATION",
              "OMS_TERMINAL_STATE",
              "OMS_POST_QUALIFICATION_STATE",
              "RETAIL_ASSISTED",
              "PREDEFINED_PRICE",
              "ORDER_MANAGER_PHASE_2",
              "OMS_LEGACY_ORDER",
              "CBV_SELECT_INVENTORY",
              "RISK_ASSESSMENT",
              "B2B",
              "PRE_ORDER_VERSION_2",
              "VISTA_INTEGRATION",
              "VISTA_NEED_CONFIRMATION",
              "CBV_SWITCH",
              "LEGACY_US_INSURANCE",
              "PAYMENT_AUTHORIZATION",
              "OM_CANCELLATION_FLOW",
              "BINDING_ORDER",
              "CBV_LITE_NO_INSURANCE",
              "PREORDER_BINDING_ORDER",
              "PREORDER_NEW_ORDER",
              "FLEET_SALES",
              "OFFLINE_INSURANCE",
              "FREEDOM_FUND"
            ]
          }
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task",
            "originalRef": "#/definitions/Task"
          }
        },
        "termsAndConditions": {
          "$ref": "#/definitions/TermsAndConditions",
          "originalRef": "#/definitions/TermsAndConditions"
        }
      },
      "description": "Order line details with product details"
    },
    "OrderReference": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time the order referenced was created"
        },
        "displayOrderId": {
          "type": "string",
          "example": "US-0000476705",
          "description": "Display order id of the referenced order"
        },
        "orderId": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Order id of the referenced order"
        }
      },
      "description": "Order Reference"
    },
    "OrderStep": {
      "type": "object",
      "required": [
        "category",
        "market"
      ],
      "properties": {
        "brand": {
          "type": "string",
          "description": "Brand",
          "enum": [
            "VCC",
            "POL",
            "WHOLESALE"
          ]
        },
        "campaign": {
          "type": "string",
          "description": "Name of the campaign the item is sold in"
        },
        "category": {
          "type": "string",
          "example": "Insurance",
          "description": "Event categories in Kafka",
          "enum": [
            "Checkout",
            "CrmIntegration",
            "Active",
            "Insurance",
            "Credit",
            "RestartCreditCheck",
            "PaymentVerification",
            "CapturePayment",
            "OrderConfirmation",
            "SSA",
            "AssignCar",
            "OnBoarding",
            "MANUFACTURING",
            "DeliveryTracking",
            "RiskAssessment",
            "AssignDealer",
            "CancelReview",
            "LegalAgreement",
            "CancelVista",
            "Refund",
            "PaymentRefundTest",
            "OrderFulfillmentTest",
            "CancelOpportunity",
            "DeliveryDetails",
            "ContractConfirmation",
            "HoldForCar",
            "CreateBindingOrder",
            "SubmitDesign",
            "Cancellation",
            "CarReservation",
            "CustomerUpdate",
            "CrmUpdate",
            "TestDataUpdate",
            "CancelSSA",
            "CancelSalesforce",
            "ChangeOrderTest",
            "AbandonedOrderTracking",
            "PartnerChanged",
            "EditDesign",
            "RetailAssistedSales",
            "VerifyFleetAccount",
            "MileageChangeInitiation",
            "MileageChangeCompletion",
            "ChangeInProgress",
            "StoreCarDetails"
          ]
        },
        "displayOrderId": {
          "type": "string",
          "example": "US-0000476705",
          "description": "Display order id"
        },
        "displayOrderLineStatus": {
          "type": "string"
        },
        "displayOrderLineStatusKey": {
          "type": "string"
        },
        "market": {
          "type": "string",
          "enum": [
            "sq-AL",
            "es-AR",
            "hy-AM",
            "en-AM",
            "de-AT",
            "az-AZ",
            "be-BY",
            "nl-BE",
            "fr-BE",
            "bs-BA",
            "pt-BR",
            "bg-BG",
            "en-CA",
            "fr-CA",
            "es-CL",
            "zh-CN",
            "es-CO",
            "hr-HR",
            "en-CY",
            "cs-CZ",
            "da-DK",
            "es-DO",
            "es-EC",
            "et-ee",
            "fi-FI",
            "fr-FR",
            "de-DE",
            "el-GR",
            "es-GT",
            "hu-HU",
            "is-IS",
            "ga-IE",
            "it-IT",
            "lv-LV",
            "lt-LT",
            "fr-LU",
            "mk-MK",
            "en-MT",
            "es-MX",
            "ro-MD",
            "ru-MD",
            "sr-ME",
            "nl-NL",
            "nb-NO",
            "es-PY",
            "es-PE",
            "pl-PL",
            "pt-PT",
            "en-PR",
            "es-PR",
            "ro-RO",
            "ru-RU",
            "sr-RS",
            "sk-SK",
            "sl-SI",
            "es-ES",
            "fi-SE",
            "sv-SE",
            "lv-CH",
            "de-CH",
            "it-CH",
            "tr-TR",
            "uk-UA",
            "en-GB",
            "en-US",
            "es-US",
            "-INVALID"
          ]
        },
        "orderId": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Order id"
        },
        "orderLineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "orderStatus": {
          "type": "string",
          "description": "Status of the order",
          "enum": [
            "NEW",
            "CHECKOUT",
            "ACTIVE",
            "CHANGE_IN_PROGRESS",
            "COMPLETED",
            "CANCEL_REVIEW",
            "CANCEL_IN_PROGRESS",
            "CANCELLED"
          ]
        },
        "salesModel": {
          "type": "string",
          "description": "Sales model",
          "enum": [
            "NONE",
            "SUB",
            "SUB_FIXED",
            "LEASE",
            "LOAN",
            "CASH",
            "PRE_ORDER",
            "PAYMENT_TEST_ORDER",
            "DEALER_MANAGED",
            "SUBSCRIBE_USED",
            "CBV",
            "MSRP"
          ]
        },
        "salesModelVariants": {
          "$ref": "#/definitions/OrderStep",
          "originalRef": "#/definitions/OrderStep"
        },
        "salesModelVariantsSet": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "OMS_MIGRATION",
              "OMS_TERMINAL_STATE",
              "OMS_POST_QUALIFICATION_STATE",
              "RETAIL_ASSISTED",
              "PREDEFINED_PRICE",
              "ORDER_MANAGER_PHASE_2",
              "OMS_LEGACY_ORDER",
              "CBV_SELECT_INVENTORY",
              "RISK_ASSESSMENT",
              "B2B",
              "PRE_ORDER_VERSION_2",
              "VISTA_INTEGRATION",
              "VISTA_NEED_CONFIRMATION",
              "CBV_SWITCH",
              "LEGACY_US_INSURANCE",
              "PAYMENT_AUTHORIZATION",
              "OM_CANCELLATION_FLOW",
              "BINDING_ORDER",
              "CBV_LITE_NO_INSURANCE",
              "PREORDER_BINDING_ORDER",
              "PREORDER_NEW_ORDER",
              "FLEET_SALES",
              "OFFLINE_INSURANCE",
              "FREEDOM_FUND"
            ]
          }
        },
        "step": {
          "$ref": "#/definitions/Step",
          "originalRef": "#/definitions/Step"
        }
      },
      "description": "Response body from the Api"
    },
    "Packagefeature": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Package feature"
    },
    "Packageprice": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "priceelement": {
          "$ref": "#/definitions/Priceelement",
          "originalRef": "#/definitions/Priceelement"
        }
      }
    },
    "Packages": {
      "type": "object",
      "properties": {
        "package": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelPackage",
            "originalRef": "#/definitions/ModelPackage"
          }
        }
      },
      "description": "Car Config: Packages"
    },
    "Partner": {
      "type": "object",
      "properties": {
        "associateDealerId": {
          "type": "string",
          "description": "Associate Dealer ID for retail assistance"
        },
        "partnerCode": {
          "type": "string",
          "example": "ADY9K",
          "description": "Partner code, 5 digit alpha-numeric"
        },
        "partnerName": {
          "type": "string",
          "example": "AutoNation Volvo Cars San Jose",
          "description": "Partner name"
        },
        "partnerType": {
          "type": "string",
          "example": "DEALER",
          "description": "Partner type",
          "enum": [
            "DEALER",
            "SALES_PARTNER"
          ]
        },
        "vccDealerId": {
          "type": "string",
          "example": 54900,
          "description": "VCC Dealer ID"
        }
      },
      "description": "Partner"
    },
    "Payment": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "example": 499.95,
          "description": "Currency amount that has been credited Volvo"
        },
        "checkoutKey": {
          "type": "string",
          "example": "6efc160f-0b82-41b0-8fef-1e5547619792",
          "description": "CheckoutKey that was used for this call to finish"
        },
        "currency": {
          "type": "string",
          "example": "USD",
          "description": "Currency of the transaction amount",
          "enum": [
            "CAD",
            "CNY",
            "DKK",
            "EUR",
            "SEK",
            "USD",
            "NOK",
            "GBP"
          ]
        },
        "paymentAttributes": {
          "$ref": "#/definitions/PaymentAttributes",
          "originalRef": "#/definitions/PaymentAttributes"
        },
        "paymentStatus": {
          "type": "string",
          "example": "OK",
          "description": "Status of the payment",
          "enum": [
            "AUTHORIZED",
            "CANCEL",
            "WAITING_CONFIRMATION",
            "CONFIRMED",
            "NOK",
            "OK",
            "PENDING",
            "UNKNOWN",
            "WAITING_COMPLETION"
          ]
        },
        "source": {
          "type": "string",
          "example": "worldline",
          "description": "Description of the payment provider that provided this payment"
        },
        "transactionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date & time of the transaction"
        },
        "transactionId": {
          "type": "string",
          "example": 123456,
          "description": "Unique transaction id for the payment as provided by the payment provider"
        },
        "type": {
          "type": "string",
          "example": "REFUND",
          "description": "Transaction Type",
          "enum": [
            "PAYMENT",
            "REFUND"
          ]
        }
      },
      "description": "A payment made on an order"
    },
    "PaymentAttributes": {
      "type": "object",
      "description": "Arbitrary map of any additional properties on a payment"
    },
    "PaymentPlanDiscount": {
      "type": "object",
      "properties": {
        "exclVat": {
          "$ref": "#/definitions/PaymentPlanDiscountInfo",
          "originalRef": "#/definitions/PaymentPlanDiscountInfo"
        },
        "inclVat": {
          "$ref": "#/definitions/PaymentPlanDiscountInfo",
          "originalRef": "#/definitions/PaymentPlanDiscountInfo"
        },
        "type": {
          "type": "string",
          "description": "Discount type. Example: fleet"
        }
      },
      "description": "Discount related details"
    },
    "PaymentPlanDiscountInfo": {
      "type": "object",
      "properties": {
        "discountAmount": {
          "type": "number",
          "description": "Discount amount. Example: 200"
        },
        "discountRate": {
          "type": "number",
          "description": "Discount rate calculated based on values of other properties. Example: 0.2"
        },
        "discountedPrice": {
          "type": "number",
          "description": "Price after discount was applied. Example: 800"
        },
        "preDiscountPrice": {
          "type": "number",
          "description": "Price before discount was applied. Example: 1000"
        }
      }
    },
    "PaymentPlanItem": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "example": "USD",
          "description": "currency",
          "enum": [
            "CAD",
            "CNY",
            "DKK",
            "EUR",
            "SEK",
            "USD",
            "NOK",
            "GBP"
          ]
        },
        "discount": {
          "type": "array",
          "description": "Discount related details",
          "items": {
            "$ref": "#/definitions/PaymentPlanDiscount",
            "originalRef": "#/definitions/PaymentPlanDiscount"
          }
        },
        "grossPrice": {
          "type": "number",
          "example": 100.55,
          "description": "price of the line item"
        },
        "netPrice": {
          "type": "number",
          "example": 100.55,
          "description": "price of the line item"
        },
        "type": {
          "type": "string",
          "description": "type of price",
          "enum": [
            "atCheckout",
            "afterCheckout"
          ]
        },
        "vatAmount": {
          "type": "number",
          "example": 16,
          "description": "vat amount"
        },
        "vatRate": {
          "type": "number",
          "example": 0.16,
          "description": "vat percentage"
        }
      },
      "description": "Payment plan for the product in order line. It contains the price information and when it needs to be paid. For example, for subscription there can be an entry for at checkout deposit and another entry of recurring payment after checkout."
    },
    "PendingCompleteEvent": {
      "type": "object",
      "properties": {
        "omEventData": {
          "$ref": "#/definitions/OmEventData",
          "originalRef": "#/definitions/OmEventData"
        },
        "task": {
          "$ref": "#/definitions/Task",
          "originalRef": "#/definitions/Task"
        }
      },
      "description": "PendingCompleteEvent stores events to be processed when cancelled order is reactivated"
    },
    "Phone": {
      "type": "object",
      "properties": {
        "order": {
          "type": "integer",
          "format": "int32"
        },
        "phoneNumber": {
          "type": "string",
          "example": 1234567890,
          "description": "The phone number, normalised according to MSISDN (E.164) standard"
        },
        "phoneRoles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "CONTACT",
              "HOME",
              "WORK",
              "MOBILE",
              "FAX"
            ]
          }
        }
      }
    },
    "Pno12": {
      "type": "object",
      "properties": {
        "pno12code": {
          "type": "string"
        }
      },
      "description": "Pno12"
    },
    "Priceelement": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Price description"
        },
        "elementprice": {
          "type": "string",
          "example": 512378.72,
          "description": "Price"
        },
        "name": {
          "type": "string",
          "example": "111NOKMY18 XC40 DCOM",
          "description": "Name"
        },
        "taxId": {
          "type": "string",
          "example": 180,
          "description": "TaxId"
        },
        "taxVersionId": {
          "type": "string",
          "example": 321,
          "description": "Tax VersionId"
        },
        "vatPosition": {
          "type": "string",
          "example": "AFTER",
          "description": "Vat Postion"
        }
      },
      "description": "Car Config: Priceelement"
    },
    "ProductV2": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "brand": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "localizations": {
          "type": "array",
          "description": "Localizations for the given product",
          "items": {
            "$ref": "#/definitions/Localization",
            "originalRef": "#/definitions/Localization"
          }
        },
        "market": {
          "type": "string"
        },
        "marketConfiguration": {
          "$ref": "#/definitions/MarketInfo",
          "originalRef": "#/definitions/MarketInfo"
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metadata",
            "originalRef": "#/definitions/Metadata"
          }
        },
        "name": {
          "type": "string",
          "description": "Product name"
        },
        "offers": {
          "type": "array",
          "description": "List of commercial offers",
          "items": {
            "$ref": "#/definitions/Offer",
            "originalRef": "#/definitions/Offer"
          }
        },
        "productId": {
          "type": "string",
          "example": "PCAT-45c79796-5b1a-11e9-8647-d663bd873d93",
          "description": "Product Unique identifier"
        },
        "productType": {
          "type": "string",
          "enum": [
            "BUNDLE",
            "CONFIGURABLEPRODUCT",
            "COMMERCIALITEM",
            "COMPONENTCONFIGURATION",
            "COMPONENT"
          ]
        },
        "replacedBy": {
          "type": "string"
        },
        "skuId": {
          "type": "string"
        },
        "skuInfo": {
          "$ref": "#/definitions/DownstreamSkuV2",
          "originalRef": "#/definitions/DownstreamSkuV2"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validTo": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "product"
    },
    "RespObjectResponseProductV2": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductV2",
          "originalRef": "#/definitions/ProductV2"
        },
        "operationId": {
          "type": "string",
          "example": "5bde0cd3-be77-481b-9727-cdcb52eaf65e",
          "description": "The operation id that was assigned to the request"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": 200,
          "description": "The status code reflecting the HTTP status code returned for this response",
          "minimum": 100,
          "maximum": 600
        }
      }
    },
    "RetailAssistedSalesPartner": {
      "type": "object",
      "properties": {
        "assistingSalesConsultantId": {
          "type": "string",
          "example": "fbar@volvocars.com",
          "description": "Assisting Sales Consultant Id (CDSID)"
        },
        "associateDealerId": {
          "type": "string",
          "description": "Associate Dealer ID for retail assistance"
        },
        "opportunityId": {
          "type": "string",
          "description": "Opportunity refers to the aspect of the Dealer having the opportunity to assist the customer with their order and delivery of the vehicle"
        },
        "partnerCode": {
          "type": "string",
          "example": "ADY9K",
          "description": "Partner code, 5 digit alpha-numeric"
        },
        "partnerName": {
          "type": "string",
          "example": "AutoNation Volvo Cars San Jose",
          "description": "Partner name"
        },
        "partnerType": {
          "type": "string",
          "example": "DEALER",
          "description": "Partner type",
          "enum": [
            "DEALER",
            "SALES_PARTNER"
          ]
        },
        "salesPartnerType": {
          "type": "string",
          "example": "RETAILASSISTED",
          "description": "Sales partner type",
          "enum": [
            "RETAILASSISTED",
            "LEASING_COMPANY"
          ]
        },
        "vccDealerId": {
          "type": "string",
          "example": 54900,
          "description": "VCC Dealer ID"
        }
      },
      "description": "Retail Assisted Sales Partner"
    },
    "SalesModelInfo": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "description": "Pricing parameters for the sales model",
          "items": {
            "$ref": "#/definitions/SalesModelParameter",
            "originalRef": "#/definitions/SalesModelParameter"
          }
        },
        "breakdown": {
          "type": "array",
          "description": "Breakdown of product in order line. A car can contain sub products like tires, color etc. Each sub product will be an breakdown item",
          "items": {
            "$ref": "#/definitions/LineBreakdownItem",
            "originalRef": "#/definitions/LineBreakdownItem"
          }
        },
        "cartPrice": {
          "type": "number",
          "description": "The amount that a given orderline contributes to the price needed to successfully check out the cart. This is salesmodel dependent and may be the sum of downpayment/deposit or even the item price itself."
        },
        "cartTax": {
          "type": "number",
          "description": "The tax component that a given orderline contributes to the tax needed to successfully check out the cart."
        },
        "contractingParties": {
          "type": "array",
          "description": "contracting Parties information",
          "items": {
            "$ref": "#/definitions/ContractingPartyItem",
            "originalRef": "#/definitions/ContractingPartyItem"
          }
        },
        "depositAmount": {
          "type": "number",
          "description": "Deposit Amount"
        },
        "depositTax": {
          "type": "number",
          "description": "Deposit Tax"
        },
        "downpaymentAmount": {
          "type": "number",
          "description": "Downpayment Amount"
        },
        "downpaymentTax": {
          "type": "number",
          "description": "Downpayment Tax"
        },
        "paymentPlan": {
          "type": "array",
          "description": "Payment plan for the product in order line. It contains the price information and when it needs to be paid. For example, for subscription there can be an entry for at checkout deposit and another entry of recurring payment after checkout.",
          "items": {
            "$ref": "#/definitions/PaymentPlanItem",
            "originalRef": "#/definitions/PaymentPlanItem"
          }
        },
        "purchaseType": {
          "type": "string",
          "description": "Purchase type of the order line. If a value is persisted, then it is returned. Else it is derived based on SalesModel.",
          "enum": [
            "NONE",
            "SUB",
            "SUB_FIXED",
            "LEASE",
            "LOAN",
            "CASH",
            "PRE_ORDER",
            "PAYMENT_TEST_ORDER",
            "DEALER_MANAGED",
            "SUBSCRIBE_USED",
            "CBV",
            "MSRP"
          ]
        },
        "type": {
          "type": "string",
          "example": "SUB",
          "description": "SalesModelInfo Type",
          "enum": [
            "NONE",
            "SUB",
            "SUB_FIXED",
            "LEASE",
            "LOAN",
            "CASH",
            "PRE_ORDER",
            "PAYMENT_TEST_ORDER",
            "DEALER_MANAGED",
            "SUBSCRIBE_USED",
            "CBV",
            "MSRP"
          ]
        }
      },
      "description": "Additional information related to the sales model.",
      "example": {
        "annualMileage": 15000,
        "contractLength": 24,
        "type": "SUB"
      }
    },
    "SalesModelParameter": {
      "type": "object",
      "properties": {
        "default": {
          "type": "number",
          "description": "The default value that should be used for the paramteter. Applicable for Steps type."
        },
        "exclusions": {
          "type": "array",
          "description": "The list of exclusions that are not allowed for the value of the parameter. Applicable for Steps type.",
          "items": {
            "type": "number",
            "description": "The list of exclusions that are not allowed for the value of the parameter. Applicable for Steps type."
          }
        },
        "fixed": {
          "type": "number",
          "description": "The fixed value that should be used fo parameter. Applicable for Fixed type."
        },
        "isPercentage": {
          "type": "boolean",
          "description": "Indicates whether parameter value is specified in percent."
        },
        "max": {
          "type": "number",
          "description": "The maximum value allowed for the parameter. Applicable for Steps type."
        },
        "min": {
          "type": "number",
          "description": "The minimum value allowed for the parameter. Applicable for Steps type."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "step": {
          "type": "number",
          "description": "The step between allowed values for the paramteter. To be used for setting up the slider control. Applicable for Steps type."
        },
        "type": {
          "type": "string",
          "description": "The type of the parameter value."
        }
      },
      "description": "Pricing parameters for the sales model"
    },
    "SalesPartner": {
      "type": "object",
      "properties": {
        "salesPartnerType": {
          "type": "string",
          "example": "RETAILASSISTED",
          "description": "Sales partner type",
          "enum": [
            "RETAILASSISTED",
            "LEASING_COMPANY"
          ]
        }
      },
      "description": "Base class to be extended by all sales leads"
    },
    "SalesPartnerUpdateRequest": {
      "type": "object",
      "required": [
        "salesPartnerType"
      ],
      "properties": {
        "orderIdentificationNumber": {
          "type": "string",
          "example": "leasing-company-order-identifier",
          "description": "External system's order identifier"
        },
        "salesPartnerType": {
          "type": "string",
          "description": "SalesPartner type. Api's current version only LEASING_COMPANY is supported intentionally.",
          "enum": [
            "RETAILASSISTED",
            "LEASING_COMPANY"
          ]
        }
      },
      "description": "Request model to update LeasingCompanySalesPartner on an Order"
    },
    "Standardfeature": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "T211",
          "description": "Feature code"
        },
        "name": {
          "type": "string",
          "example": "T5 emblem",
          "description": "Feature Name"
        }
      },
      "description": "Car Config: Standardfeature"
    },
    "Standardfeaturegroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Standard felger",
          "description": "Feature group name"
        },
        "standardfeature": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Standardfeature",
            "originalRef": "#/definitions/Standardfeature"
          }
        }
      },
      "description": "Car Config: Standardfeaturegroup"
    },
    "Standardfeatures": {
      "type": "object",
      "properties": {
        "standardfeaturegroup": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Standardfeaturegroup",
            "originalRef": "#/definitions/Standardfeaturegroup"
          }
        }
      },
      "description": "Car Config: Standardfeatures"
    },
    "Step": {
      "type": "object",
      "required": [
        "bpmActivity",
        "consumerVisible",
        "manual",
        "name",
        "status",
        "updateTime"
      ],
      "properties": {
        "activeTasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task",
            "originalRef": "#/definitions/Task"
          }
        },
        "bpmActivity": {
          "type": "string",
          "description": "Give the name of task or subprocess(which is a list of tasks) that the step will map to"
        },
        "completeWhenActive": {
          "type": "boolean",
          "description": "If true, this step will be set to COMPLETED when the order line status becomes ACTIVE"
        },
        "consumerVisible": {
          "type": "boolean",
          "description": "If true, this task is visible to the consumer and appears as a step in the Transact UI. All steps appear in the Admin UI."
        },
        "enabledExpr": {
          "type": "string",
          "description": "Is the step enabled"
        },
        "externalIntegrations": {
          "$ref": "#/definitions/ExternalIntegrations",
          "originalRef": "#/definitions/ExternalIntegrations"
        },
        "manual": {
          "type": "boolean",
          "description": "If true, this step must be manually performed and updated by the Admin UI."
        },
        "name": {
          "type": "string",
          "example": "InsuranceCheck",
          "description": "Unique name of the step"
        },
        "status": {
          "type": "string",
          "description": "Current status of the step. Initial status: NOT_STARTED",
          "enum": [
            "NOT_STARTED",
            "ACTIVE",
            "COMPLETED",
            "FAILED",
            "PENDING_COMPLETE"
          ]
        },
        "stepData": {
          "$ref": "#/definitions/StepData",
          "originalRef": "#/definitions/StepData"
        },
        "stepDataHistory": {
          "$ref": "#/definitions/StepDataHistory",
          "originalRef": "#/definitions/StepDataHistory"
        },
        "updateTime": {
          "type": "string",
          "format": "date-time",
          "description": "the last update timestamp"
        }
      },
      "description": "step"
    },
    "StepData": {
      "type": "object",
      "properties": {
        "approvalTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp when step decision was APPROVED"
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason for Cancellation"
        },
        "decision": {
          "type": "string",
          "description": "Decision of the step. e.g. the sub status can be either NEED_INFO or APPROVED_WITH_STIPS while the status is PENDING",
          "enum": [
            "NONE",
            "PENDING",
            "APPROVED",
            "APPROVED_WITH_STIPS",
            "DECLINED",
            "CANCELLED",
            "MANUAL_REVIEW",
            "NOT_SUPPORTED",
            "RESTART",
            "REFER"
          ]
        },
        "decisionReason": {
          "type": "string",
          "description": "Reason of Decision"
        },
        "decisionReasonLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DecisionReasonLog",
            "originalRef": "#/definitions/DecisionReasonLog"
          }
        },
        "manualReviewReason": {
          "type": "string",
          "description": "Reason of manual review",
          "x-deprecated": true
        },
        "manualReviewReasonLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DecisionReasonLog",
            "originalRef": "#/definitions/DecisionReasonLog"
          }
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "When was this Step modified last time"
        },
        "modifiedBy": {
          "type": "string",
          "example": "JOHNDOE (CDSID)",
          "description": "Who modified this Step last time"
        },
        "referenceId": {
          "type": "string",
          "description": "Some steps have some kind of reference id which is provided by the external system (eg. a credit check will usually have a reference id) and that id can be stored in this field."
        },
        "statusUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp when step status was updated"
        }
      },
      "description": "provider supplied data for a step"
    },
    "StepDataHistory": {
      "type": "object",
      "properties": {
        "stepDataList": {
          "type": "array",
          "description": "List of step data that get removed from step data",
          "items": {
            "$ref": "#/definitions/StepData",
            "originalRef": "#/definitions/StepData"
          }
        }
      },
      "description": "remove existing step data to historical step data collection"
    },
    "Task": {
      "type": "object",
      "properties": {
        "archivalData": {
          "$ref": "#/definitions/ArchivalData",
          "originalRef": "#/definitions/ArchivalData"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time the task was added to the order"
        },
        "dispatcherTask": {
          "type": "boolean",
          "example": true,
          "description": "is this task a dispatcher task"
        },
        "dispatcherTaskList": {
          "type": "array",
          "description": "Lists dispatcher config events",
          "items": {
            "$ref": "#/definitions/Task",
            "originalRef": "#/definitions/Task"
          }
        },
        "label": {
          "type": "string",
          "example": "TODO",
          "description": "Human readable label for use in the UI"
        },
        "lastChecked": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time last checkTask called"
        },
        "modified": {
          "type": "string",
          "format": "date-time",
          "description": "Date/time when the status was last updated"
        },
        "modifiedBy": {
          "type": "string",
          "example": "JOHNDOE (CDSID)",
          "description": "Who modified this Task last time"
        },
        "orderId": {
          "type": "string",
          "example": "yIvzSK9rcx0U5ST3xFweBMufT7gLuVSTA7sGYVZyq9Me9VulohKH6SKDut75VsugDhAMPw78hkSmQRXQB24vw",
          "description": "Order id"
        },
        "orderLineNumber": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Order line number"
        },
        "taskData": {
          "type": "object",
          "example": {
            "decision": "APPROVE",
            "recipient": "some.email@domail.com"
          },
          "description": "Additional data related to the task, updated by the service",
          "additionalProperties": {
            "type": "object",
            "example": {
              "decision": "APPROVE",
              "recipient": "some.email@domail.com"
            },
            "description": "Additional data related to the task, updated by the service"
          }
        },
        "taskId": {
          "type": "string",
          "example": 1000,
          "description": "Task Id"
        },
        "taskName": {
          "type": "string",
          "description": "Name of associated task definition"
        },
        "taskStatus": {
          "type": "string",
          "description": "Status",
          "enum": [
            "NOT_STARTED",
            "ACTIVE",
            "COMPLETED",
            "FAILED",
            "PENDING_COMPLETE",
            "NOT_STARTED",
            "ACTIVE",
            "COMPLETED",
            "FAILED"
          ]
        }
      },
      "description": "Task"
    },
    "TermsAndConditions": {
      "type": "object",
      "properties": {
        "blobUri": {
          "type": "string",
          "description": "URI stores t&c pdf in blob object storage, current is S3 URL. The file will NOT be available until StoreTermsAndConditions BPM task finished"
        },
        "url": {
          "type": "string",
          "description": "original URL"
        }
      },
      "description": "Terms & Conditions"
    },
    "TotalPrice": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string",
          "example": "NOK",
          "description": "Currency Value"
        },
        "preorderDepositPrice": {
          "type": "number",
          "format": "double",
          "example": 0,
          "description": "Temporary placeholder value: when using the first iteration preorder, this denotes the deposit amount required"
        },
        "priceelement": {
          "type": "array",
          "description": "Price Element",
          "items": {
            "$ref": "#/definitions/Priceelement",
            "originalRef": "#/definitions/Priceelement"
          }
        },
        "pricelistname": {
          "type": "string",
          "example": "111NOKMY18 XC40 DCOM",
          "description": "Price List Name"
        },
        "totalpricevalue": {
          "type": "string",
          "example": 512378.72,
          "description": "Price Value"
        }
      },
      "description": "Car Config: TotalPrice"
    },
    "Upholstery": {
      "type": "object",
      "properties": {
        "feature": {
          "$ref": "#/definitions/Feature",
          "originalRef": "#/definitions/Feature"
        }
      },
      "description": "Car Config: Upholstery"
    },
    "Variant": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/VariantType",
          "originalRef": "#/definitions/VariantType"
        },
        "drive": {
          "$ref": "#/definitions/VariantType",
          "originalRef": "#/definitions/VariantType"
        },
        "engine": {
          "$ref": "#/definitions/VariantTypeEngine",
          "originalRef": "#/definitions/VariantTypeEngine"
        },
        "fueltype": {
          "$ref": "#/definitions/VariantType",
          "originalRef": "#/definitions/VariantType"
        },
        "gccdriveline": {
          "$ref": "#/definitions/VariantType",
          "originalRef": "#/definitions/VariantType"
        },
        "gccvariant": {
          "$ref": "#/definitions/VariantType",
          "originalRef": "#/definitions/VariantType"
        },
        "gearbox": {
          "$ref": "#/definitions/VariantType",
          "originalRef": "#/definitions/VariantType"
        },
        "marketingcode": {
          "$ref": "#/definitions/VariantType",
          "originalRef": "#/definitions/VariantType"
        },
        "model": {
          "$ref": "#/definitions/VariantType",
          "originalRef": "#/definitions/VariantType"
        },
        "pno12": {
          "$ref": "#/definitions/Pno12",
          "originalRef": "#/definitions/Pno12"
        },
        "pno34plusoptions": {
          "type": "string",
          "example": "53672R50C11001900RD2000",
          "description": "Pno3 plus options"
        },
        "salesversion": {
          "$ref": "#/definitions/VariantType",
          "originalRef": "#/definitions/VariantType"
        },
        "steering": {
          "$ref": "#/definitions/VariantType",
          "originalRef": "#/definitions/VariantType"
        },
        "transmission": {
          "$ref": "#/definitions/VariantType",
          "originalRef": "#/definitions/VariantType"
        }
      },
      "description": "Car Config: Variant"
    },
    "VariantType": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Variant Code"
        },
        "elementprice": {
          "type": "string",
          "description": "Variant Element Price"
        },
        "name": {
          "type": "string",
          "description": "Variant Name"
        }
      },
      "description": "Car Config: VariantType"
    },
    "VariantTypeEngine": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Variant Code"
        },
        "elementprice": {
          "type": "string",
          "description": "Variant Element Price"
        },
        "fuelType": {
          "type": "string",
          "description": "\"The fuel type of the vehicle. This information is populated by CbV Select and should not be assumed to exist for GCC-based cars.  Note that 'mild' hybrids are treated as PETROL or DIESEL.  Only PHEV (plug-in hybrids) are treated as HYBRID.  BEVs are PURE_ELECTRIC.\" "
        },
        "fuelTypeDescription": {
          "type": "string",
          "description": "The text description shown on the CbV Select frontend. This can be useed for e.g. confirmation email."
        },
        "name": {
          "type": "string",
          "description": "Variant Name"
        }
      },
      "description": "Used for denoting the engine type. This information is populated by CbV Select and should not be assumed to exist for GCC-based cars"
    },
    "View": {
      "type": "object",
      "properties": {
        "angle": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Angle",
            "originalRef": "#/definitions/Angle"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "WltpSummary": {
      "type": "object",
      "properties": {
        "combinedCo2Name": {
          "type": "string",
          "description": "Combined Co2Name"
        },
        "combinedCo2Unit": {
          "type": "string",
          "description": "Combined Co2Unit"
        },
        "combinedCo2Value": {
          "type": "string",
          "description": "Combined Co2 Value"
        },
        "electricEnergyConsumptionName": {
          "type": "string",
          "description": "Electric Energy Consumption Name"
        },
        "electricEnergyConsumptionUnit": {
          "type": "string",
          "description": "Electric Energy Consumption Unit"
        },
        "electricEnergyConsumptionValue": {
          "type": "string",
          "description": "Electric Energy ConsumptionValue"
        },
        "electricRangeName": {
          "type": "string",
          "description": "Electric Range Name"
        },
        "electricRangeUnit": {
          "type": "string",
          "description": "Electric Range Unit"
        },
        "electricRangeValue": {
          "type": "string",
          "description": "Electric Range Value"
        },
        "exUrbanFuelConsumptionName": {
          "type": "string",
          "description": "ExUrban Fuel Consumption Name"
        },
        "exUrbanFuelConsumptionUnit": {
          "type": "string",
          "description": "ExUrban Fuel ConsumptionUnit"
        },
        "exUrbanFuelConsumptionValue": {
          "type": "string",
          "description": "ExUrban Fuel ConsumptionValue"
        },
        "fuelConsumptionName": {
          "type": "string",
          "description": "Fuel Consumption Name"
        },
        "fuelConsumptionUnit": {
          "type": "string",
          "description": "Fuel Consumption Unit"
        },
        "fuelConsumptionValue": {
          "type": "string",
          "description": "Fuel Consumption Value"
        },
        "isOfficialName": {
          "type": "string",
          "description": "IsOfficialName"
        },
        "isOfficialValue": {
          "type": "string",
          "description": "IsOfficialValue"
        },
        "urbanFuelConsumptionName": {
          "type": "string",
          "description": "Urban Fuel Consumption Name"
        },
        "urbanFuelConsumptionUnit": {
          "type": "string",
          "description": "Urban Fuel Consumption Unit"
        },
        "urbanFuelConsumptionValue": {
          "type": "string",
          "description": "Urban Fuel ConsumptionValue"
        },
        "weightedCombinedCo2Name": {
          "type": "string",
          "description": "Weighted Combined Co2Name"
        },
        "weightedCombinedCo2Unit": {
          "type": "string",
          "description": "Weighted Combined Co2Unit"
        },
        "weightedCombinedCo2Value": {
          "type": "string",
          "description": "Weighted Combined Co2 Value"
        },
        "weightedFuelConsumptionName": {
          "type": "string",
          "description": "Weighted Fuel Consumption Name"
        },
        "weightedFuelConsumptionUnit": {
          "type": "string",
          "description": "Weighted Fuel ConsumptionUnit"
        },
        "weightedFuelConsumptionValue": {
          "type": "string",
          "description": "Weighted Fuel ConsumptionValue"
        }
      },
      "description": "Car Config: WltpSummary"
    }
  }
}